using System.Text;
using CoreReserve.Core.AppSettings;
using CoreReserve.Core.Extensions;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;

namespace CoreReserve.Infrastructure.Security.Extensions
{
    #region JWT Authentication Extension

    /// <summary>
    /// Extens√£o para configura√ß√£o de autentica√ß√£o JWT Bearer na aplica√ß√£o.
    /// Fornece m√©todos para registrar e configurar servi√ßos de autentica√ß√£o JWT
    /// com tratamento customizado de exce√ß√µes e valida√ß√£o de tokens.
    /// </summary>
    /// <remarks>
    /// Esta extens√£o centraliza toda a configura√ß√£o JWT, incluindo par√¢metros de valida√ß√£o,
    /// tratamento de eventos e integra√ß√£o com o sistema de logging da aplica√ß√£o.
    /// Utiliza o JwtExceptionHandler para tratamento consistente de erros.
    /// </remarks>
    public static class AuthenticationExtension
    {
        #region JWT Configuration Method

        /// <summary>
        /// Configura e registra os servi√ßos de autentica√ß√£o JWT Bearer no container de DI.
        /// </summary>
        /// <param name="services">Cole√ß√£o de servi√ßos para registro das depend√™ncias</param>
        /// <param name="configuration">Configura√ß√£o da aplica√ß√£o contendo as op√ß√µes JWT</param>
        /// <returns>A cole√ß√£o de servi√ßos modificada para permitir chaining de configura√ß√µes</returns>
        /// <remarks>
        /// Configura:
        /// - Par√¢metros de valida√ß√£o de token (issuer, audience, lifetime, signature)
        /// - Eventos customizados para tratamento de exce√ß√µes
        /// - Logging de sucessos e falhas de autentica√ß√£o
        /// - Integra√ß√£o com JwtExceptionHandler para respostas consistentes
        /// </remarks>
        /// <exception cref="ArgumentNullException">Lan√ßada quando services ou configuration s√£o nulos</exception>
        /// <exception cref="InvalidOperationException">Lan√ßada quando as configura√ß√µes JWT est√£o inv√°lidas</exception>
        public static IServiceCollection AddJwtAuthentication(this IServiceCollection services, IConfiguration configuration)
        {
            var jwtSettings = configuration.GetOptions<JwtOptions>();

            var secretKey = jwtSettings.SecretKey;
            var issuer = jwtSettings.Issuer;
            var audience = jwtSettings.Audience;

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =>
                {
                    #region Token Validation Parameters

                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        ValidIssuer = issuer,
                        ValidAudience = audience,
                        IssuerSigningKey = key,
                        ClockSkew = TimeSpan.Zero
                    };

                    #endregion

                    #region JWT Bearer Events

                    options.Events = new JwtBearerEvents
                    {
                        OnAuthenticationFailed = JwtExceptionHandler.OnAuthenticationFailed,
                        OnChallenge = JwtExceptionHandler.OnChallenge,
                        OnForbidden = JwtExceptionHandler.OnForbidden,
                        OnTokenValidated = context =>
                        {
                            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<JwtBearerEvents>>();
                            var userId = context.Principal?.FindFirst("sub")?.Value;
                            logger.LogInformation("‚úÖ JWT Validado com sucesso | Usu√°rio ID: {UserId}", userId);
                            return Task.CompletedTask;
                        }
                    };

                    #endregion
                });

            return services;
        }

        #endregion
    }

    #endregion
}

/*
üîê EXPLICA√á√ÉO DETALHADA DO C√ìDIGO

üìã VIS√ÉO GERAL:
A AuthenticationExtension √© uma classe est√°tica que fornece m√©todos de extens√£o
para configurar autentica√ß√£o JWT Bearer em aplica√ß√µes ASP.NET Core. Ela encapsula
toda a complexidade de configura√ß√£o JWT, oferecendo uma interface simples e
consistente para integra√ß√£o com o sistema de autentica√ß√£o.

üéØ PROP√ìSITO:
- Centralizar configura√ß√£o de autentica√ß√£o JWT
- Simplificar integra√ß√£o com container de DI
- Padronizar tratamento de eventos de autentica√ß√£o
- Fornecer logging estruturado para auditoria

üîß COMPONENTES PRINCIPAIS:

1Ô∏è‚É£ AddJwtAuthentication:
   ‚öôÔ∏è M√©todo de extens√£o principal para IServiceCollection
   üîë Configura par√¢metros de valida√ß√£o de token
   üìä Integra com JwtExceptionHandler para tratamento de erros
   ‚úÖ Implementa logging de sucessos de autentica√ß√£o

üìã PAR√ÇMETROS DE VALIDA√á√ÉO:
- ValidateIssuer: Valida o emissor do token
- ValidateAudience: Valida o p√∫blico-alvo do token
- ValidateLifetime: Verifica se o token n√£o expirou
- ValidateIssuerSigningKey: Valida a assinatura digital
- ClockSkew = Zero: Remove toler√¢ncia de tempo para maior precis√£o

üé™ EVENTOS CONFIGURADOS:

üö® OnAuthenticationFailed:
   - Delegado para JwtExceptionHandler.OnAuthenticationFailed
   - Trata falhas espec√≠ficas de valida√ß√£o
   - Retorna respostas JSON estruturadas

üõ°Ô∏è OnChallenge:
   - Delegado para JwtExceptionHandler.OnChallenge
   - Intercepta desafios de autoriza√ß√£o
   - Substitui resposta HTML por JSON

‚õî OnForbidden:
   - Delegado para JwtExceptionHandler.OnForbidden
   - Trata casos de acesso negado

‚úÖ OnTokenValidated:
   - Registra sucessos de autentica√ß√£o
   - Extrai e loga ID do usu√°rio
   - Fornece auditoria positiva

‚öôÔ∏è INTEGRA√á√ÉO:
Esta extens√£o √© utilizada no Program.cs da aplica√ß√£o:

builder.Services.AddJwtAuthentication(builder.Configuration);

üîí BENEF√çCIOS DE SEGURAN√áA:
- Valida√ß√£o rigorosa de todos os aspectos do token
- Logging completo de eventos de autentica√ß√£o
- Tratamento consistente de exce√ß√µes
- Auditoria de sucessos e falhas

üí° CARACTER√çSTICAS T√âCNICAS:
- M√©todo de extens√£o para IServiceCollection
- Configura√ß√£o fluente e leg√≠vel
- Integra√ß√£o com sistema de configura√ß√£o do .NET
- Suporte a dependency injection
- Tratamento de exce√ß√µes centralizado

üé® PADR√ïES IMPLEMENTADOS:
- Extension Method Pattern
- Fluent Interface
- Dependency Injection
- Configuration Pattern
- Event Handler Pattern

üìà VANTAGENS:
- Configura√ß√£o √∫nica e reutiliz√°vel
- Manuten√ß√£o centralizada
- Testabilidade aprimorada
- Separa√ß√£o de responsabilidades
- C√≥digo limpo e organizado
*/