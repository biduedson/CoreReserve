using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Mime;
using System.Text.Json;

namespace CoreReserve.Infrastructure.Security.Extensions
{
    #region JWT Exception Handler

    /// <summary>
    /// Manipulador de exce√ß√µes para autentica√ß√£o JWT Bearer.
    /// Fornece tratamento customizado para falhas de autentica√ß√£o, desafios de autoriza√ß√£o e proibi√ß√µes de acesso.
    /// </summary>
    /// <remarks>
    /// Esta classe centraliza o tratamento de erros JWT, garantindo respostas consistentes em formato JSON
    /// e logging adequado para monitoramento e auditoria de seguran√ßa.
    /// </remarks>
    internal sealed class JwtExceptionHandler
    {
        #region Authentication Failed Handler

        /// <summary>
        /// Manipula falhas de autentica√ß√£o JWT, fornecendo respostas JSON estruturadas
        /// e logging detalhado para diferentes tipos de exce√ß√µes de token.
        /// </summary>
        /// <param name="context">Contexto da falha de autentica√ß√£o contendo informa√ß√µes sobre o erro</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona de escrita da resposta</returns>
        /// <remarks>
        /// Trata especificamente:
        /// - Tokens expirados
        /// - Assinaturas inv√°lidas
        /// - Issuer/Audience inv√°lidos
        /// - Problemas de lifetime
        /// - Tokens malformados
        /// </remarks>
        public static Task OnAuthenticationFailed(AuthenticationFailedContext context)
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<JwtBearerEvents>>();
            var response = context.Response;
            response.StatusCode = StatusCodes.Status401Unauthorized;
            response.ContentType = MediaTypeNames.Application.Json;

            string message = context.Exception switch
            {
                SecurityTokenExpiredException => "Token expirado.",
                SecurityTokenInvalidSignatureException => "Assinatura do token inv√°lida.",
                SecurityTokenInvalidIssuerException => "Issuer inv√°lido.",
                SecurityTokenInvalidAudienceException => "Audience inv√°lido.",
                SecurityTokenNoExpirationException => "Token sem expira√ß√£o.",
                SecurityTokenInvalidLifetimeException => "Lifetime inv√°lido.",
                ArgumentException => "Token ausente ou malformado.",
                _ => "Falha na autentica√ß√£o com o token."
            };

            logger.LogWarning("üîê JWT Authentication Failed | IP: {IP} | Erro: {ErroDetalhado} | Exception: {Exception}",
                context.HttpContext.Connection.RemoteIpAddress?.ToString(),
                message,
                context.Exception?.Message);

            var json = JsonSerializer.Serialize(new
            {
                statusCode = 401,
                message,
                error = context.Exception?.GetType().Name
            });

            return response.WriteAsync(json);
        }

        #endregion

        #region Challenge Handler

        /// <summary>
        /// Manipula desafios de autoriza√ß√£o JWT quando o token est√° ausente ou n√£o √© v√°lido.
        /// Substitui a resposta HTML padr√£o por uma resposta JSON estruturada.
        /// </summary>
        /// <param name="context">Contexto do desafio de autoriza√ß√£o</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona de escrita da resposta</returns>
        /// <remarks>
        /// Intercepta o comportamento padr√£o do ASP.NET Core que retornaria uma p√°gina HTML 401,
        /// fornecendo uma resposta JSON consistente para APIs.
        /// </remarks>
        public static Task OnChallenge(JwtBearerChallengeContext context)
        {
            context.HandleResponse(); // Impede o comportamento padr√£o (401 HTML)
            var response = context.Response;
            response.StatusCode = StatusCodes.Status401Unauthorized;
            response.ContentType = MediaTypeNames.Application.Json;

            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<JwtBearerEvents>>();
            const string message = "Token ausente ou n√£o autorizado.";

            logger.LogWarning("üö´ JWT Challenge | IP: {IP} | Detalhe: {Detalhe}",
                context.HttpContext.Connection.RemoteIpAddress?.ToString(),
                message);

            var json = JsonSerializer.Serialize(new
            {
                statusCode = 401,
                message
            });

            return response.WriteAsync(json);
        }

        #endregion

        #region Forbidden Handler

        /// <summary>
        /// Manipula situa√ß√µes onde o usu√°rio est√° autenticado mas n√£o possui permiss√£o
        /// para acessar o recurso solicitado.
        /// </summary>
        /// <param name="context">Contexto da proibi√ß√£o de acesso</param>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona de escrita da resposta</returns>
        /// <remarks>
        /// Diferencia entre n√£o autenticado (401) e n√£o autorizado (403),
        /// fornecendo feedback claro sobre a natureza da restri√ß√£o de acesso.
        /// </remarks>
        public static Task OnForbidden(ForbiddenContext context)
        {
            var response = context.Response;
            response.StatusCode = StatusCodes.Status403Forbidden;
            response.ContentType = MediaTypeNames.Application.Json;

            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<JwtBearerEvents>>();

            logger.LogWarning("‚õî JWT Forbidden | IP: {IP} | Recurso acessado sem permiss√£o",
                context.HttpContext.Connection.RemoteIpAddress?.ToString());

            var json = JsonSerializer.Serialize(new
            {
                statusCode = 403,
                message = "Acesso negado."
            });

            return response.WriteAsync(json);
        }

        #endregion
    }

    #endregion
}

/*
üîê EXPLICA√á√ÉO DETALHADA DO C√ìDIGO

üìã VIS√ÉO GERAL:
O JwtExceptionHandler √© uma classe utilit√°ria que centraliza o tratamento de exce√ß√µes 
relacionadas √† autentica√ß√£o JWT Bearer em aplica√ß√µes ASP.NET Core. Ela substitui o 
comportamento padr√£o do framework, fornecendo respostas JSON consistentes e logging 
estruturado para eventos de seguran√ßa.

üéØ PROP√ìSITO:
- Padronizar respostas de erro de autentica√ß√£o em formato JSON
- Fornecer logging detalhado para auditoria e monitoramento
- Melhorar a experi√™ncia do desenvolvedor com mensagens de erro claras
- Manter consist√™ncia na API de resposta

üîß COMPONENTES PRINCIPAIS:

1Ô∏è‚É£ OnAuthenticationFailed:
   üö® Trata falhas espec√≠ficas de valida√ß√£o de token
   üìù Mapeia diferentes tipos de exce√ß√£o para mensagens user-friendly
   üìä Registra logs com IP e detalhes da falha
   üîÑ Retorna JSON estruturado com c√≥digo 401

2Ô∏è‚É£ OnChallenge:
   üõ°Ô∏è Intercepta desafios de autoriza√ß√£o
   üö´ Substitui resposta HTML padr√£o por JSON
   üìç Usado quando token est√° ausente ou inv√°lido
   üîç Fornece feedback claro sobre necessidade de autentica√ß√£o

3Ô∏è‚É£ OnForbidden:
   ‚õî Trata casos de acesso negado (usu√°rio autenticado mas sem permiss√£o)
   üéØ Diferencia entre n√£o autenticado (401) e n√£o autorizado (403)
   üìã Mant√©m consist√™ncia com outras respostas da API

üîí BENEF√çCIOS DE SEGURAN√áA:
- Logging de tentativas de acesso n√£o autorizadas
- Rastreamento de IPs para an√°lise de seguran√ßa
- Mensagens de erro que n√£o exp√µem informa√ß√µes sens√≠veis
- Auditoria completa de eventos de autentica√ß√£o

‚öôÔ∏è INTEGRA√á√ÉO:
Esta classe √© utilizada internamente pela AuthenticationExtension para configurar 
automaticamente o tratamento de exce√ß√µes JWT durante a configura√ß√£o dos servi√ßos 
de autentica√ß√£o da aplica√ß√£o.

üé® CARACTER√çSTICAS T√âCNICAS:
- M√©todos est√°ticos para performance
- Respostas ass√≠ncronas para n√£o bloquear threads
- Serializa√ß√£o JSON nativa do .NET
- Logging estruturado com templates
- Sealed class para preven√ß√£o de heran√ßa desnecess√°ria

üí° CASOS DE USO:
- APIs REST que precisam de respostas consistentes
- Aplica√ß√µes com requisitos de auditoria
- Sistemas com m√∫ltiplos clientes (web, mobile, desktop)
- Ambientes onde debugging de autentica√ß√£o √© cr√≠tico
*/