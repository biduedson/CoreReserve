using CoreReserve.Core.SharedKernel;
using CoreReserve.Infrastructure.Data.Context;

namespace CoreReserve.Infrastructure.Data.Repositories
{
    /// <summary>
    /// Reposit√≥rio respons√°vel por armazenar eventos no Event Store.
    /// Implementa opera√ß√µes de persist√™ncia ass√≠ncrona e gerenciamento de recursos.
    /// </summary>
    internal sealed class EventStoreRepository(EventStoreDbContext dbContext) : IEventStoreRepository
    {
        /// <summary>
        /// Salva uma cole√ß√£o de eventos no banco de dados de forma ass√≠ncrona.
        /// </summary>
        /// <param name="eventStores">Os eventos a serem armazenados.</param>
        public async Task StoreAsync(IEnumerable<EventStore> eventStores)
        {
            await dbContext.EventStores.AddRangeAsync(eventStores);
            await dbContext.SaveChangesAsync();
        }

        #region IDisposable

        // Para detectar chamadas redundantes.
        private bool _disposed;

        /// <summary>
        /// Implementa√ß√£o do padr√£o Dispose para liberar recursos corretamente.
        /// </summary>
        ~EventStoreRepository() => Dispose(false);

        /// <summary>
        /// Implementa√ß√£o p√∫blica do padr√£o Dispose, cham√°vel por consumidores.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Implementa√ß√£o protegida do padr√£o Dispose.
        /// </summary>
        /// <param name="disposing">Define se a libera√ß√£o de recursos est√° ocorrendo explicitamente.</param>
        private void Dispose(bool disposing)
        {
            if (_disposed)
                return;

            // Libera recursos gerenciados
            if (disposing)
                dbContext.Dispose();

            _disposed = true;
        }

        #endregion
    }

    // -----------------------------------------
    // üîπ EXPLICA√á√ÉO DO C√ìDIGO üîπ
    // -----------------------------------------
    /*
    ‚úÖ Classe EventStoreRepository ‚Üí Implementa um reposit√≥rio respons√°vel por armazenar eventos no Event Store. 
    ‚úÖ M√©todo StoreAsync() ‚Üí Permite salvar eventos de forma ass√≠ncrona, garantindo efici√™ncia na persist√™ncia de dados. 
    ‚úÖ Uso de IDisposable ‚Üí Garante que recursos como conex√µes do banco sejam corretamente liberados quando n√£o necess√°rios. 
    ‚úÖ Implementa√ß√£o de Dispose() ‚Üí Evita vazamento de mem√≥ria ao liberar objetos gerenciados no encerramento da inst√¢ncia. 
    ‚úÖ Essa abordagem melhora a escalabilidade e mant√©m a consist√™ncia do Event Store, garantindo auditoria e rastreabilidade dos eventos. 
    */

}