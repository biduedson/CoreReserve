using CoreReserve.Domain.Entities.UserAggregate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using CoreReserve.Infrastructure.Data.Extensions;

namespace CoreReserve.Infrastructure.Data.Mappings
{
    /// <summary>
    /// ConfiguraÃ§Ã£o do mapeamento da entidade <see cref="Customer"/> no banco de dados.
    /// Define propriedades, restriÃ§Ãµes e mapeamento de valores para garantir integridade dos dados.
    /// </summary>
    internal class UserConfiguration : IEntityTypeConfiguration<User>
    {
        /// <summary>
        /// Configura o mapeamento da entidade Customer.
        /// </summary>
        /// <param name="builder">O construtor de entidade.</param>
        public void Configure(EntityTypeBuilder<User> builder)
        {
            // Configura a entidade base
            builder
                .ConfigureBaseEntity();

            // Configura Name como obrigatÃ³rio e define um tamanho mÃ¡ximo de 100 caracteres
            builder
                .Property(user => user.Name)
                .IsRequired() // NOT NULL
                .HasMaxLength(100);

            // Configura Gender como obrigatÃ³rio e converte para string com limite de 6 caracteres
            builder
                .Property(user => user.Gender)
                .IsRequired() // NOT NULL
                .HasMaxLength(6)
                .HasConversion<string>();

            // Mapeamento do Value Object Email dentro da entidade User
            builder.OwnsOne(user => user.Email, ownedNav =>
            {
                ownedNav
                    .Property(email => email.Address)
                    .IsRequired() // NOT NULL
                    .HasMaxLength(254)
                    .HasColumnName(nameof(User.Email));

                // Define um Ã­ndice Ãºnico para garantir que nÃ£o existam e-mails duplicados
                ownedNav
                    .HasIndex(email => email.Address)
                    .IsUnique();
            });

            // Mapeamento do Value Object Password dentro da entidade User
            builder.OwnsOne(user => user.Password, ownedNav =>
            {
                ownedNav
                .Property(password => password.NewPassword)
                .IsRequired() // NOT NULL
                .HasMaxLength(255)
                .HasColumnName(nameof(User.Password));

            });

            // Configura CreatedAt como obrigatÃ³rio e define o tipo da coluna como DATE
            builder
                .Property(user => user.CreatedAt)
                .IsRequired() // NOT NULL
                .HasColumnType("DATE");
        }
    }

    // -----------------------------------------
    // ðŸ”¹ EXPLICAÃ‡ÃƒO DO CÃ“DIGO ðŸ”¹
    // -----------------------------------------
    /*
    âœ… Classe UserConfiguration â†’ Define o mapeamento da entidade User no banco de dados. 
    âœ… MÃ©todo Configure() â†’ Aplica configuraÃ§Ãµes, incluindo obrigatoriedade e limites de tamanho para propriedades. 
    âœ… Propriedade Gender â†’ Converte para string, garantindo compatibilidade e consistÃªncia no armazenamento. 
    âœ… Mapeamento do Value Object Email â†’ Usa OwnsOne para definir Email como um objeto de valor dentro da entidade. 
    âœ… Propriedade Email.Address â†’ Configurada como Ãºnica, garantindo que nÃ£o haja duplicidade de e-mails na base de dados. 
    âœ… Propriedade CreatedAt â†’ Armazenada como DATE no banco para garantir precisÃ£o de tempo. 
    âœ… Essa abordagem melhora a integridade dos dados e facilita consultas eficientes no sistema. 
    */

}