using System.Data;
using CoreReserve.Core.Extensions;
using CoreReserve.Core.SharedKernel;
using CoreReserve.Infrastructure.Data.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace CoreReserve.Infrastructure.Data
{
    /// <summary>
    /// Implementa√ß√£o do padr√£o Unit of Work, respons√°vel pelo gerenciamento de transa√ß√µes e persist√™ncia no banco de dados.
    /// </summary>
    internal sealed class UnitOfWork(
        WriteDbContext writeDbContext,
        IEventStoreRepository eventStoreRepository,
        IMediator mediator,
        ILogger<UnitOfWork> logger) : IUnitOfWork
    {
        /// <summary>
        /// Salva as altera√ß√µes no banco de dados de forma ass√≠ncrona.
        /// Implementa estrat√©gia de execu√ß√£o para garantir resili√™ncia e evitar falhas na conex√£o.
        /// </summary>
        public async Task SaveChangesAsync()
        {
            // Criando a estrat√©gia de execu√ß√£o (Resili√™ncia de conex√£o e tentativas de banco de dados).
            var strategy = writeDbContext.Database.CreateExecutionStrategy();

            // Executando a estrat√©gia.
            await strategy.ExecuteAsync(async () =>
            {
                await using var transaction = await writeDbContext.Database.BeginTransactionAsync(IsolationLevel.ReadCommitted);

                logger.LogInformation("----- Iniciando transa√ß√£o: '{TransactionId}'", transaction.TransactionId);

                try
                {
                    // Obtendo eventos de dom√≠nio e eventos armazen√°veis das entidades rastreadas no contexto do EF Core.
                    var (domainEvents, eventStores) = BeforeSaveChanges();

                    var rowsAffected = await writeDbContext.SaveChangesAsync();

                    logger.LogInformation("----- Commit da transa√ß√£o: '{TransactionId}'", transaction.TransactionId);

                    await transaction.CommitAsync();

                    // Disparando os eventos e armazenando os eventos no Event Store.
                    await AfterSaveChangesAsync(domainEvents, eventStores);

                    logger.LogInformation(
                        "----- Transa√ß√£o confirmada com sucesso: '{TransactionId}', Linhas afetadas: {RowsAffected}",
                        transaction.TransactionId,
                        rowsAffected);
                }
                catch (Exception ex)
                {
                    logger.LogError(
                        ex,
                        "Ocorreu uma exce√ß√£o inesperada ao confirmar a transa√ß√£o: '{TransactionId}', mensagem: {Message}",
                        transaction.TransactionId,
                        ex.Message);

                    await transaction.RollbackAsync();

                    throw;
                }
            });
        }

        /// <summary>
        /// Executa l√≥gica antes de salvar as altera√ß√µes no banco de dados.
        /// </summary>
        /// <returns>Uma tupla contendo a lista de eventos de dom√≠nio e eventos do Event Store.</returns>
        private (IReadOnlyList<BaseEvent> domainEvents, IReadOnlyList<EventStore> eventStores) BeforeSaveChanges()
        {
            // Obt√©m todas as entidades de dom√≠nio com eventos pendentes
            var domainEntities = writeDbContext
                .ChangeTracker
                .Entries<BaseEntity>()
                .Where(entry => entry.Entity.DomainEvents.Any())
                .ToList();

            // Obt√©m todos os eventos de dom√≠nio das entidades
            var domainEvents = domainEntities
                .SelectMany(entry => entry.Entity.DomainEvents)
                .ToList();

            // Converte eventos de dom√≠nio em eventos armazen√°veis
            var eventStores = domainEvents
                .ConvertAll(@event => new EventStore(@event.AggregateId, @event.GetGenericTypeName(), @event.ToJson()));

            // Limpa eventos de dom√≠nio das entidades
            domainEntities.ForEach(entry => entry.Entity.ClearDomainEvents());

            return (domainEvents.AsReadOnly(), eventStores.AsReadOnly());
        }

        /// <summary>
        /// Executa a√ß√µes ap√≥s salvar as altera√ß√µes, como publica√ß√£o de eventos de dom√≠nio e armazenamento no Event Store.
        /// </summary>
        /// <param name="domainEvents">Lista de eventos de dom√≠nio.</param>
        /// <param name="eventStores">Lista de eventos do Event Store.</param>
        /// <returns>Uma tarefa representando a opera√ß√£o ass√≠ncrona.</returns>
        private async Task AfterSaveChangesAsync(
            IReadOnlyList<BaseEvent> domainEvents,
            IReadOnlyList<EventStore> eventStores)
        {
            // Publica cada evento de dom√≠nio usando _mediator.
            if (domainEvents.Count > 0)
                await Task.WhenAll(domainEvents.Select(@event => mediator.Publish(@event)));

            // Armazena os eventos no Event Store usando _eventStoreRepository.
            if (eventStores.Count > 0)
                await eventStoreRepository.StoreAsync(eventStores);
        }

        #region IDisposable

        // Para detectar chamadas redundantes.
        private bool _disposed;

        // Implementa√ß√£o p√∫blica do padr√£o Dispose, cham√°vel por consumidores.
        ~UnitOfWork() => Dispose(false);

        // Implementa√ß√£o p√∫blica do padr√£o Dispose, cham√°vel por consumidores.
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        // Implementa√ß√£o protegida do padr√£o Dispose.
        private void Dispose(bool disposing)
        {
            if (_disposed)
                return;

            // Libera recursos gerenciados
            if (disposing)
            {
                writeDbContext.Dispose();
                eventStoreRepository.Dispose();
            }

            _disposed = true;
        }

        #endregion
    }

    // -----------------------------------------
    // üîπ EXPLICA√á√ÉO DO C√ìDIGO üîπ
    // -----------------------------------------
    /*
    ‚úÖ Classe UnitOfWork ‚Üí Implementa o padr√£o Unit of Work, garantindo controle de transa√ß√µes e persist√™ncia no banco de dados. 
    ‚úÖ Estrat√©gia de execu√ß√£o ‚Üí Cria uma estrat√©gia para garantir resili√™ncia de conex√£o e tentativas de banco de dados. 
    ‚úÖ M√©todos BeforeSaveChanges() e AfterSaveChangesAsync() ‚Üí Capturam eventos de dom√≠nio antes da grava√ß√£o e os processam ap√≥s o commit. 
    ‚úÖ Implementa√ß√£o de IDisposable ‚Üí Libera corretamente recursos ao encerrar a inst√¢ncia. 
    ‚úÖ Uso de MediatR para publica√ß√£o de eventos ‚Üí Garante comunica√ß√£o desacoplada entre dom√≠nios dentro da aplica√ß√£o. 
    ‚úÖ Uso de Event Store ‚Üí Registra eventos para futura auditoria e rastreamento. 
    */
}