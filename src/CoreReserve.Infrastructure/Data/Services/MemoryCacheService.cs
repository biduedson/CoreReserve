
using CoreReserve.Core.AppSettings;
using CoreReserve.Core.Extensions;
using CoreReserve.Core.SharedKernel;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
namespace CoreReserve.Infrastructure.Data.Services
{
    /// <summary>
    /// Servi√ßo de cache em mem√≥ria, respons√°vel por armazenar e recuperar dados tempor√°rios.
    /// Implementa um mecanismo eficiente de recupera√ß√£o e remo√ß√£o de dados do cache interno.
    /// </summary>
    internal class MemoryCacheService(
        ILogger<MemoryCacheService> logger,
        IMemoryCache memoryCache,
        IOptions<CacheOptions> cacheOptions) : ICacheService
    {
        private const string CacheServiceName = nameof(MemoryCacheService);

        /// <summary>
        /// Define op√ß√µes padr√£o para expira√ß√£o do cache.
        /// Configura√ß√£o baseada nas op√ß√µes fornecidas via <see cref="CacheOptions"/>.
        /// </summary>
        private readonly MemoryCacheEntryOptions _cacheOptions = new()
        {
            AbsoluteExpirationRelativeToNow = TimeSpan.FromHours(cacheOptions.Value.AbsoluteExpirationInHours),
            SlidingExpiration = TimeSpan.FromSeconds(cacheOptions.Value.SlidingExpirationInSeconds)
        };

        /// <summary>
        /// Obt√©m um item do cache ou o cria caso n√£o exista.
        /// </summary>
        /// <typeparam name="TItem">Tipo do item armazenado.</typeparam>
        /// <param name="cacheKey">Chave √∫nica do cache.</param>
        /// <param name="factory">Fun√ß√£o que gera o item caso n√£o esteja no cache.</param>
        /// <returns>O item recuperado ou criado.</returns>
        public async Task<TItem> GetOrCreateAsync<TItem>(string cacheKey, Func<Task<TItem>> factory)
        {
            return await memoryCache.GetOrCreateAsync(cacheKey, async cacheEntry =>
            {
                var cacheValue = cacheEntry?.Value;
                if (cacheValue != null)
                {
                    logger.LogInformation("----- Recuperado do {CacheServiceName}: '{CacheKey}'", CacheServiceName, cacheKey);
                    return (TItem)cacheValue;
                }

                var item = await factory();
                if (!item.IsDefault()) // SonarQube Bug: item != null
                {
                    logger.LogInformation("----- Adicionado ao {CacheServiceName}: '{CacheKey}'", CacheServiceName, cacheKey);
                    memoryCache.Set(cacheKey, item, _cacheOptions);
                }

                return item;
            });
        }

        /// <summary>
        /// Obt√©m uma lista de itens do cache ou a cria caso n√£o exista.
        /// </summary>
        /// <typeparam name="TItem">Tipo dos itens armazenados.</typeparam>
        /// <param name="cacheKey">Chave √∫nica do cache.</param>
        /// <param name="factory">Fun√ß√£o que gera os itens caso n√£o estejam no cache.</param>
        /// <returns>A lista de itens recuperada ou criada.</returns>
        public async Task<IReadOnlyList<TItem>> GetOrCreateAsync<TItem>(
            string cacheKey,
            Func<Task<IReadOnlyList<TItem>>> factory)
        {
            return await memoryCache.GetOrCreateAsync(cacheKey, async cacheEntry =>
            {
                var cacheValues = cacheEntry?.Value;
                if (cacheValues != null)
                {
                    logger.LogInformation("----- Recuperado do {CacheServiceName}: '{CacheKey}'", CacheServiceName, cacheKey);
                    return (IReadOnlyList<TItem>)cacheValues;
                }

                var items = await factory();
                if (items?.Any() == true)
                {
                    logger.LogInformation("----- Adicionado ao {CacheServiceName}: '{CacheKey}'", CacheServiceName, cacheKey);
                    memoryCache.Set(cacheKey, items, _cacheOptions);
                }

                return items;
            });
        }

        /// <summary>
        /// Remove um ou mais itens do cache em mem√≥ria.
        /// </summary>
        /// <param name="cacheKeys">Lista de chaves a serem removidas do cache.</param>
        public Task RemoveAsync(params string[] cacheKeys)
        {
            foreach (var cacheKey in cacheKeys)
            {
                logger.LogInformation("----- Removido do {CacheServiceName}: '{CacheKey}'", CacheServiceName, cacheKey);
                memoryCache.Remove(cacheKey);
            }

            return Task.CompletedTask;
        }
    }

    // -----------------------------------------
    // üîπ EXPLICA√á√ÉO DO C√ìDIGO üîπ
    // -----------------------------------------
    /*
    ‚úÖ Classe MemoryCacheService ‚Üí Implementa um servi√ßo de cache em mem√≥ria para otimizar acesso e armazenamento tempor√°rio de dados. 
    ‚úÖ M√©todos GetOrCreateAsync() ‚Üí Buscam itens no cache, adicionando-os caso ainda n√£o estejam armazenados. 
    ‚úÖ M√©todo RemoveAsync() ‚Üí Permite a remo√ß√£o de m√∫ltiplos itens do cache baseado na chave. 
    ‚úÖ Uso de ILogger ‚Üí Garante log detalhado para monitoramento de opera√ß√µes realizadas no cache. 
    ‚úÖ Configura√ß√£o de expira√ß√£o do cache via MemoryCacheEntryOptions ‚Üí Define pol√≠ticas de validade dos dados armazenados. 
    ‚úÖ Essa abordagem melhora significativamente a performance e escalabilidade da aplica√ß√£o, reduzindo carga em consultas ao banco. 
    */

}