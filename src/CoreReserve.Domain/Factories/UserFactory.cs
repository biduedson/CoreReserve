using Ardalis.Result;
using CoreReserve.Domain.Entities.UserAggregate;
using CoreReserve.Domain.ValueObjects;

namespace CoreReserve.Domain.Factories;

/// <summary>
/// FÃ¡brica para criaÃ§Ã£o de usuÃ¡rios.
/// ResponsÃ¡vel por validar e instanciar objetos da entidade User.
/// </summary>
public static class UserFactory
{
    /// <summary>
    /// Cria um usuÃ¡rio validando os dados antes da instanciaÃ§Ã£o.
    /// Se houver erros, retorna um resultado com mensagens de erro.
    /// </summary>
    /// <param name="name">Nome do usuÃ¡rio.</param>
    /// <param name="gender">GÃªnero do usuÃ¡rio.</param>
    /// <param name="email">EndereÃ§o de e-mail do usuÃ¡rio.</param>
    /// <param name="password">Senha do usuÃ¡rio.</param>
    /// <param name="createdAt">Data de criaÃ§Ã£o do usuÃ¡rio.</param>
    /// <returns>Resultado contendo o usuÃ¡rio criado ou mensagens de erro.</returns>
    public static Result<User> Create(
        string name,
        EGender gender,
        string email,
        string password,
        DateTime createdAt
    )
    {
        var emailResult = Email.Create(email);
        var passwordResult = Password.Create(password);
        var errors = new List<string>();

        if (!emailResult.IsSuccess)
            errors.AddRange(emailResult.Errors);

        if (!passwordResult.IsSuccess)
            errors.AddRange(passwordResult.Errors);

        // Se houver erros na validaÃ§Ã£o, retorna um resultado com mensagens de erro.
        return errors.Any() ? Result<User>.Error(new ErrorList(errors.ToArray())) :
            Result<User>.Success(new User(name, gender, emailResult.Value, passwordResult.Value, createdAt));
    }

    /// <summary>
    /// Cria um usuÃ¡rio sem necessidade de validaÃ§Ã£o dos dados.
    /// Assume que email e senha jÃ¡ foram validados externamente.
    /// </summary>
    /// <param name="name">Nome do usuÃ¡rio.</param>
    /// <param name="gender">GÃªnero do usuÃ¡rio.</param>
    /// <param name="email">Objeto de e-mail validado.</param>
    /// <param name="password">Objeto de senha validado.</param>
    /// <param name="createdAt">Data de criaÃ§Ã£o do usuÃ¡rio.</param>
    /// <returns>UsuÃ¡rio criado sem realizar validaÃ§Ãµes internas.</returns>
    public static User Create(string name, EGender gender, Email email, Password password, DateTime createdAt)
        => new(name, gender, email, password, createdAt);
}

// -----------------------------------------
// ğŸ”¹ EXPLICAÃ‡ÃƒO DETALHADA ğŸ”¹
// -----------------------------------------

/*
âœ… Classe UserFactory â†’ Implementa o padrÃ£o Factory para criaÃ§Ã£o de usuÃ¡rios.
âœ… MÃ©todo Create() com validaÃ§Ã£o â†’ Usa Ardalis.Result para encapsular erros e garantir que e-mail e senha sejam vÃ¡lidos antes de instanciar um usuÃ¡rio.
âœ… MÃ©todo Create() sem validaÃ§Ã£o â†’ Assume que os objetos `Email` e `Password` jÃ¡ foram validados, permitindo a instanciaÃ§Ã£o direta.
âœ… Uso de Email.Create() e Password.Create() â†’ Aplica regras de validaÃ§Ã£o antes da criaÃ§Ã£o de um novo usuÃ¡rio.
âœ… Uso de Ardalis.Result â†’ Encapsula o resultado e permite tratamento estruturado de erros.
âœ… Arquitetura baseada em Domain-Driven Design â†’ MantÃ©m separaÃ§Ã£o entre entidades e lÃ³gica de criaÃ§Ã£o de objetos.
âœ… Essa abordagem melhora a integridade dos dados e facilita manutenÃ§Ã£o e testes do sistema.
*/