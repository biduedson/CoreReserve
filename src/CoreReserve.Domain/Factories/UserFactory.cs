using Ardalis.Result;
using CoreReserve.Domain.Entities.UserAggregate;
using CoreReserve.Domain.ValueObjects;

namespace CoreReserve.Domain.Factories;

/// <summary>
/// F√°brica para cria√ß√£o de usu√°rios.
/// Respons√°vel por validar e instanciar objetos da entidade <see cref="User"/>.
/// </summary>
public static class UserFactory
{
    /// <summary>
    /// Cria um usu√°rio ap√≥s validar os dados fornecidos.
    /// Se houver erros na valida√ß√£o, retorna uma lista de mensagens de erro.
    /// </summary>
    /// <param name="name">Nome completo do usu√°rio.</param>
    /// <param name="gender">G√™nero do usu√°rio.</param>
    /// <param name="email">Endere√ßo de e-mail do usu√°rio.</param>
    /// <param name="password">Senha de acesso do usu√°rio.</param>
    /// <param name="createdAt">Data e hora de cria√ß√£o do usu√°rio.</param>
    /// <returns>
    /// Um <see cref="Result{T}"/> contendo o usu√°rio criado caso a valida√ß√£o tenha sucesso,
    /// ou uma lista de erros caso os dados sejam inv√°lidos.
    /// </returns>
    public static Result<User> Create(
        string name,
        EGender gender,
        string email,
        string password
    )
    {
        var emailResult = Email.Create(email);
        var passwordResult = Password.Create(password);
        var errors = new List<string>();

        if (!emailResult.IsSuccess)
            errors.AddRange(emailResult.Errors);

        if (!passwordResult.IsSuccess)
            errors.AddRange(passwordResult.Errors);

        // Retorna erros de valida√ß√£o, caso existam.
        return errors.Any()
            ? Result<User>.Error(new ErrorList(errors.ToArray()))
            : Result<User>.Success(new User(name, gender, emailResult.Value, passwordResult.Value));
    }

    /// <summary>
    /// Cria um usu√°rio sem realizar valida√ß√µes internas nos par√¢metros.
    /// Este m√©todo assume que <paramref name="email"/> e <paramref name="password"/> j√° foram validados externamente.
    /// </summary>
    /// <param name="name">Nome completo do usu√°rio.</param>
    /// <param name="gender">G√™nero do usu√°rio.</param>
    /// <param name="email">Objeto <see cref="Email"/> j√° validado.</param>
    /// <param name="password">Objeto <see cref="Password"/> j√° validado.</param>
    /// <param name="createdAt">Data e hora de cria√ß√£o do usu√°rio.</param>
    /// <returns>Um objeto <see cref="User"/> instanciado com os valores fornecidos.</returns>
    public static User Create(string name, EGender gender, Email email, Password password)
        => new(name, gender, email, password);
}

// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe UserFactory ‚Üí Implementa o padr√£o Factory para cria√ß√£o de usu√°rios.
‚úÖ M√©todo Create() com valida√ß√£o ‚Üí Usa Ardalis.Result para encapsular erros e garantir que e-mail e senha sejam v√°lidos antes de criar um usu√°rio.
‚úÖ M√©todo Create() sem valida√ß√£o ‚Üí Assume que `Email` e `Password` j√° foram validados externamente e instancia o usu√°rio diretamente.
‚úÖ Uso de Email.Create() e Password.Create() ‚Üí Aplica regras de valida√ß√£o antes da cria√ß√£o de um novo usu√°rio.
‚úÖ Uso de Ardalis.Result ‚Üí Encapsula o resultado da opera√ß√£o e permite tratamento estruturado de erros.
‚úÖ Arquitetura baseada em Domain-Driven Design ‚Üí Mant√©m separa√ß√£o entre entidades e l√≥gica de cria√ß√£o de objetos.
‚úÖ Melhorias na documenta√ß√£o:
   - Adi√ß√£o de `<see cref="NomeDaClasse"/>` para refer√™ncias diretas em XML Docs.
   - Explica√ß√£o clara sobre os m√©todos e suas responsabilidades.
   - Melhor detalhamento dos par√¢metros e retorno dos m√©todos.
‚úÖ Essa abordagem melhora a integridade dos dados e facilita a manuten√ß√£o e os testes do sistema.
*/
