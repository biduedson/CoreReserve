using CoreReserve.Query.Abstractions;

namespace CoreReserve.Query.QueriesModel
{

    /// <summary>
    /// Modelo de consulta para usuarios.
    /// Utilizado na camada de consulta para representar os dados dos usuarios recuperados do banco.
    /// </summary>
    public class UserQueryModel : IQueryModel<Guid>
    {
        /// <summary>
        /// Construtor principal que inicializa um modelo de cliente baseado nos dados fornecidos.
        /// </summary>
        /// <param name="id">Identificador Ãºnico do usuario</param>
        /// <param name="name">Nome do usuario.</param>
        /// <param name="gender">GÃªnero do usuario.</param>
        /// <param name="email">EndereÃ§o de e-mail do usuario.</param>
        /// <param name="password">EndereÃ§o de e-mail do usuario.</param>
        /// <param name="isActive">Define se  o usuario esta ativo</param>
        /// <param name="createdAt">Data de criaÃ§ao do usuario.</param>
        public UserQueryModel(
            Guid id,
            string name,
            string gender,
            string email,
            string password,
            bool isActive,
            DateTime createdAt)
        {
            Id = id;
            Name = name;
            Password = password;
            Gender = gender;
            Email = email;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// Construtor privado usado pelo mecanismo de persistÃªncia.
        /// Garante que objetos sejam corretamente materializados sem inicializaÃ§Ã£o direta.
        /// </summary>
        private UserQueryModel()
        {
        }

        /// <summary>
        /// Identificador Ãºnico do usuario.
        /// </summary>
        public Guid Id { get; private init; }

        /// <summary>
        /// Primeiro nome do usuario.
        /// </summary>
        public string Name { get; private init; }

        /// <summary>
        /// GÃªnero do usuario.
        /// </summary>
        public string Gender { get; private init; }

        /// <summary>
        /// EndereÃ§o de e-mail do usuario.
        /// </summary>
        public string Email { get; private init; }

        /// <summary>
        /// password do usuario.
        /// </summary>
        public string Password { get; private set; }

        /// <summary>
        /// Define se  o usuario esta ativo.
        /// </summary>
        public bool IsActive { get; } = true;

        /// <summary>
        /// Data de criaÃ§ao do usuario.
        /// </summary>
        public DateTime CreatedAt { get; }

    }
}
// -----------------------------------------
// ðŸ”¹ EXPLICAÃ‡ÃƒO DETALHADA ðŸ”¹
// -----------------------------------------

/*
âœ… Classe UserQueryModel â†’ Modelo de consulta usado para recuperar usuarios no banco.
âœ… ImplementaÃ§Ã£o de IQueryModel<Guid> â†’ Indica que a entidade possui um identificador Ãºnico do tipo GUID.
âœ… Construtor principal â†’ Inicializa um objeto com os dados do usuario.
âœ… Construtor privado â†’ Utilizado pelo mecanismo de persistÃªncia para recriar objetos sem inicializaÃ§Ã£o manual.
âœ… Propriedades com init-only â†’ Garante que os valores sejam atribuÃ­dos apenas durante a criaÃ§Ã£o do objeto.
âœ… Propriedade FullName â†’ Facilita a obtenÃ§Ã£o do nome completo do usuario sem necessidade de concatenaÃ§Ã£o manual.
âœ… Arquitetura baseada em CQRS â†’ MantÃ©m separaÃ§Ã£o entre comandos (modificaÃ§Ã£o) e consultas (leitura).
âœ… Essa estrutura melhora eficiÃªncia na leitura de dados e mantÃ©m a integridade da modelagem.
*/

