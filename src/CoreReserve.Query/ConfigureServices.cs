using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using AutoMapper;
using CoreReserve.Query.Abstractions;
using CoreReserve.Query.Data.Context;
using CoreReserve.Query.Data.Mappings;
using CoreReserve.Query.Data.Repositories;
using CoreReserve.Query.Data.Repositories.Abstractions;
using FluentValidation;
using Microsoft.Extensions.DependencyInjection;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Conventions;
using MongoDB.Bson.Serialization.Serializers;

namespace CoreReserve.Query
{
    /// <summary>
    /// Classe est√°tica para configurar os servi√ßos da camada de consultas.
    /// Define inje√ß√£o de depend√™ncia para query handlers, banco de dados NoSQL e reposit√≥rios.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public static class ConfigureServices
    {
        /// <summary>
        /// Registra manipuladores de consultas na cole√ß√£o de servi√ßos.
        /// </summary>
        /// <param name="services">Cole√ß√£o de servi√ßos.</param>
        public static IServiceCollection AddQueryHandlers(this IServiceCollection services)
        {
            var assembly = Assembly.GetAssembly(typeof(IQueryMarker));
            return services
                .AddMediatR(cfg => cfg.RegisterServicesFromAssembly(assembly!)) // Registra handlers do MediatR.
                .AddSingleton<IMapper>(new Mapper(new MapperConfiguration(cfg => cfg.AddMaps(assembly)))) // Configura AutoMapper.
                .AddValidatorsFromAssembly(assembly); // Adiciona validadores do FluentValidation.
        }

        /// <summary>
        /// Registra o contexto de leitura do banco de dados NoSQL na cole√ß√£o de servi√ßos.
        /// </summary>
        /// <param name="services">Cole√ß√£o de servi√ßos.</param>
        public static IServiceCollection AddReadDbContext(this IServiceCollection services)
        {
            services
                .AddScoped<ISynchronizeDb, NoSqlDbContext>() // Registra o servi√ßo de sincroniza√ß√£o.
                .AddScoped<IReadDbContext, NoSqlDbContext>() // Registra o contexto de leitura.
                .AddScoped<NoSqlDbContext>(); // Adiciona o contexto do banco NoSQL.

            ConfigureMongoDb(); // Configura MongoDB.

            return services;
        }

        /// <summary>
        /// Registra reposit√≥rios somente leitura na cole√ß√£o de servi√ßos.
        /// </summary>
        /// <param name="services">Cole√ß√£o de servi√ßos.</param>
        public static IServiceCollection AddReadOnlyRepositories(this IServiceCollection services) =>
            services.AddScoped<IUserReadOnlyRepository, UserReadOnlyRepository>();

        /// <summary>
        /// Configura os par√¢metros e conven√ß√µes do MongoDB.
        /// </summary>
        private static void ConfigureMongoDb()
        {
            try
            {
                // Passo 1: Configura o serializador para tipo Guid.
                BsonSerializer.TryRegisterSerializer(new GuidSerializer(GuidRepresentation.CSharpLegacy));

                // Passo 2: Configura√ß√µes de conven√ß√£o para todos os mapeamentos.
                ConventionRegistry.Register("Conventions",
                    new ConventionPack
                    {
                    new CamelCaseElementNameConvention(), // Converte nomes de elementos para camel case.
                    new EnumRepresentationConvention(BsonType.String), // Serializa enums como strings.
                    new IgnoreExtraElementsConvention(true), // Ignora elementos extras ao desserializar.
                    new IgnoreIfNullConvention(true) // Ignora valores nulos ao serializar.
                    }, _ => true);

                // Passo 3: Registra configura√ß√µes de mapeamento.
                new UserMap().Configure(); // Configura√ß√£o da classe Customer.
            }
            catch
            {
                // Ignora exce√ß√µes durante a configura√ß√£o.
            }
        }
    }
}

// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe ConfigureServices ‚Üí Respons√°vel pela configura√ß√£o dos servi√ßos da camada de consulta.
‚úÖ Implementa√ß√£o de m√©todos de extens√£o ‚Üí Permite adicionar servi√ßos diretamente √† IServiceCollection.
‚úÖ Uso de MediatR ‚Üí Facilita a comunica√ß√£o entre componentes desacoplados com handlers de consultas.
‚úÖ Uso de AutoMapper ‚Üí Automatiza a convers√£o entre objetos de dom√≠nio e modelos de consulta.
‚úÖ Uso de FluentValidation ‚Üí Adiciona valida√ß√£o para consultas antes de serem processadas.
‚úÖ Uso de MongoDB ‚Üí Configura a conex√£o com banco NoSQL, incluindo serializa√ß√£o e conven√ß√µes.
‚úÖ M√©todo ConfigureMongoDb() ‚Üí Define serializadores, conven√ß√µes e mapeamentos para garantir compatibilidade.
‚úÖ Arquitetura baseada em CQRS ‚Üí Separa opera√ß√µes de leitura e escrita, garantindo escalabilidade e organiza√ß√£o.
‚úÖ Essa abordagem melhora a manuten√ß√£o do c√≥digo e torna o sistema modular e eficiente.
*/
