
using Ardalis.Result;
using Ardalis.Result.FluentValidation;
using CoreReserve.Core.SharedKernel;
using CoreReserve.Query.Application.User.Queries;
using CoreReserve.Query.Data.Repositories.Abstractions;
using CoreReserve.Query.QueriesModel;
using FluentValidation;
using MediatR;

namespace CoreReserve.Query.Application.User.Handlers
{

    /// <summary>
    /// Manipulador da consulta para obter um usu√°rio por ID.
    /// Respons√°vel por validar a requisi√ß√£o, consultar o banco de dados e otimizar o acesso utilizando cache.
    /// </summary>
    public class GetUserByIdQueryHandler(
        IValidator<GetUserByIdQuery> validator,
        IUserReadOnlyRepository repository,
        ICacheService cacheService) : IRequestHandler<GetUserByIdQuery, Result<UserQueryModel>>
    {
        /// <summary>
        /// Manipula a consulta para obter um usu√°rio pelo identificador.
        /// Valida os dados da requisi√ß√£o, busca no cache e consulta no banco se necess√°rio.
        /// </summary>
        /// <param name="request">Consulta para recupera√ß√£o de usu√°rio.</param>
        /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
        /// <returns>Modelo de usu√°rio encapsulado no resultado.</returns>
        public async Task<Result<UserQueryModel>> Handle(
            GetUserByIdQuery request,
            CancellationToken cancellationToken)
        {
            // Valida a requisi√ß√£o antes de executar a consulta.
            var validationResult = await validator.ValidateAsync(request, cancellationToken);
            if (!validationResult.IsValid)
            {
                // Retorna o resultado com erros de valida√ß√£o.
                return Result<UserQueryModel>.Invalid(validationResult.AsErrors());
            }

            // Cria uma chave de cache baseada na consulta e no ID do usu√°rio.
            var cacheKey = $"{nameof(GetUserByIdQuery)}_{request.Id}";

            // Obt√©m o usu√°rio do cache ou busca no banco se n√£o estiver armazenado.
            var user = await cacheService.GetOrCreateAsync(cacheKey, () => repository.GetByIdAsync(request.Id));

            // Se o usu√°rio n√£o for encontrado, retorna um erro indicando que n√£o h√° registros correspondentes.
            return user == null
                ? Result<UserQueryModel>.NotFound($"No user found with Id: {request.Id}")
                : Result<UserQueryModel>.Success(user);
        }
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe GetUserByIdQueryHandler ‚Üí Processa a consulta para obter um usu√°rio pelo identificador.
‚úÖ Implementa√ß√£o de IRequestHandler<GetUserByIdQuery, Result<UserQueryModel>> ‚Üí Define o contrato da consulta com MediatR.
‚úÖ Uso de FluentValidation ‚Üí Garante que os dados da requisi√ß√£o sejam v√°lidos antes de executar a busca.
‚úÖ Uso de IUserReadOnlyRepository ‚Üí Garante que os dados sejam recuperados sem modifica√ß√µes, seguindo CQRS.
‚úÖ Uso de ICacheService ‚Üí Otimiza a recupera√ß√£o de dados, reduzindo consultas ao banco e melhorando performance.
‚úÖ Chave de cache personalizada ‚Üí Permite armazenar resultados e reaproveitar dados sem precisar consultar o banco toda vez.
‚úÖ M√©todo Handle() ‚Üí Garante que a busca seja eficiente e validada antes da execu√ß√£o.
‚úÖ Arquitetura baseada em CQRS ‚Üí Mant√©m separa√ß√£o entre comandos e consultas, garantindo escalabilidade e efici√™ncia na recupera√ß√£o de dados.
‚úÖ Essa abordagem melhora a performance, reduz o tempo de resposta e evita acessos desnecess√°rios ao banco de dados.
*/