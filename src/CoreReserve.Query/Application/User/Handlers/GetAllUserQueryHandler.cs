using Ardalis.Result;
using CoreReserve.Core.SharedKernel;
using CoreReserve.Query.Application.User.Queries;
using CoreReserve.Query.Data.Repositories.Abstractions;
using CoreReserve.Query.QueriesModel;
using MediatR;

namespace CoreReserve.Query.Application.User.Handlers
{
    /// <summary>
    /// Manipulador da consulta para obter todos os Usuarios.
    /// ResponsÃ¡vel por recuperar os dados do banco e otimizar o acesso utilizando cache.
    /// </summary>
    public class GetAllUserQueryHandler(IUserReadOnlyRepository repository, ICacheService cacheService)
        : IRequestHandler<GetAllUserQuery, Result<IEnumerable<UserQueryModel>>>
    {
        /// <summary>
        /// Chave utilizada para armazenar os dados de Usuarios no cache.
        /// </summary>
        private const string CacheKey = nameof(GetAllUserQuery);

        /// <summary>
        /// Manipula a consulta para obter todos os Usuarios.
        /// Retorna os dados armazenados no cache ou recupera do banco caso nÃ£o estejam cacheados.
        /// </summary>
        /// <param name="request">Consulta para recuperaÃ§Ã£o de Usuarios.</param>
        /// <param name="cancellationToken">Token de cancelamento da operaÃ§Ã£o.</param>
        /// <returns>Lista de Usuarios encapsulada no resultado.</returns>
        public async Task<Result<IEnumerable<UserQueryModel>>> Handle(
              GetAllUserQuery request,
              CancellationToken cancellationToken)
        {
            // Retorna os dados do cache ou recupera do banco caso nÃ£o estejam disponÃ­veis.
            return Result<IEnumerable<UserQueryModel>>.Success(
                await cacheService.GetOrCreateAsync(CacheKey, repository.GetAllAsync));
        }
    }

    // -----------------------------------------
    // ðŸ”¹ EXPLICAÃ‡ÃƒO DETALHADA ðŸ”¹
    // -----------------------------------------

    /*
    âœ… Classe GetAllCustomerQueryHandler â†’ Processa a consulta para obter todos os Usuarios.
    âœ… ImplementaÃ§Ã£o de IRequestHandler<GetAllUserQuery, Result<IEnumerable<UserQueryModel>>> â†’ Define o contrato da consulta com MediatR.
    âœ… Uso de IUserReadOnlyRepository â†’ Garante que os dados sejam recuperados sem modificaÃ§Ãµes, seguindo CQRS.
    âœ… Uso de ICacheService â†’ Otimiza a recuperaÃ§Ã£o de dados, reduzindo consultas ao banco e melhorando performance.
    âœ… Constante CacheKey â†’ Define uma chave fixa para armazenar os dados no cache.
    âœ… MÃ©todo Handle() â†’ ObtÃ©m os dados da fonte mais eficiente (cache ou repositÃ³rio), garantindo que a resposta seja rÃ¡pida.
    âœ… Arquitetura baseada em CQRS â†’ Separa operaÃ§Ãµes de consulta e manipulaÃ§Ã£o de dados, garantindo escalabilidade e eficiÃªncia.
    âœ… Essa abordagem melhora a performance e reduz o tempo de resposta ao buscar registros no banco.
    */


}