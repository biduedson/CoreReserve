using FluentValidation;

namespace CoreReserve.Query.Application.User.Queries
{
    /// <summary>
    /// Validador para a consulta de obtenÃ§Ã£o de usuÃ¡rio por ID.
    /// Garante que a consulta contenha um identificador vÃ¡lido antes de ser processada.
    /// </summary>
    public class GetUserByIdQueryValidator : AbstractValidator<GetUserByIdQuery>
    {
        /// <summary>
        /// Configura as regras de validaÃ§Ã£o para a consulta.
        /// </summary>
        public GetUserByIdQueryValidator()
        {
            RuleFor(command => command.Id)
                .NotEmpty() // Garante que o ID nÃ£o esteja vazio.
                .WithMessage("User ID cannot be empty.");
        }
    }
}
// -----------------------------------------
// ğŸ”¹ EXPLICAÃ‡ÃƒO DETALHADA ğŸ”¹
// -----------------------------------------

/*
âœ… Classe GetUserByIdQueryValidator â†’ Valida a consulta antes de sua execuÃ§Ã£o.
âœ… HeranÃ§a de AbstractValidator<GetUserByIdQuery> â†’ Utiliza FluentValidation para definir regras de validaÃ§Ã£o.
âœ… Uso de RuleFor(command => command.Id) â†’ Garante que o campo ID seja obrigatÃ³rio antes de processar a consulta.
âœ… Uso de .WithMessage() â†’ Permite definir mensagens de erro personalizadas para melhorar a experiÃªncia do usuÃ¡rio.
âœ… Arquitetura baseada em CQRS â†’ MantÃ©m separaÃ§Ã£o entre leitura (query) e validaÃ§Ã£o, garantindo organizaÃ§Ã£o e escalabilidade.
âœ… Essa abordagem melhora a integridade dos dados e evita consultas invÃ¡lidas.
*/
