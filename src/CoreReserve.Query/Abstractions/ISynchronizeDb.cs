using System.Linq.Expressions;

namespace CoreReserve.Query.Abstractions
{
    /// <summary>
    /// Interface para sincroniza√ß√£o de modelos de consulta com o banco de dados.
    /// Define opera√ß√µes para inser√ß√£o, atualiza√ß√£o e remo√ß√£o de registros na base de consultas.
    /// </summary>
    public interface ISynchronizeDb : IDisposable
    {
        /// <summary>
        /// Insere ou atualiza um modelo de consulta no banco de dados.
        /// Se um registro correspondente ao filtro existir, ele ser√° atualizado; caso contr√°rio, um novo ser√° criado.
        /// </summary>
        /// <typeparam name="TQueryModel">Tipo do modelo de consulta.</typeparam>
        /// <param name="queryModel">Modelo de consulta a ser inserido ou atualizado.</param>
        /// <param name="upsertFilter">Express√£o de filtro usada para determinar a condi√ß√£o de atualiza√ß√£o.</param>
        /// <returns>Tarefa ass√≠ncrona representando a opera√ß√£o de upsert.</returns>
        Task UpsertAsync<TQueryModel>(TQueryModel queryModel, Expression<Func<TQueryModel, bool>> upsertFilter)
            where TQueryModel : IQueryModel;

        /// <summary>
        /// Exclui modelos de consulta do banco de dados com base no filtro especificado.
        /// Remove apenas os registros que correspondem √† condi√ß√£o definida na express√£o de filtro.
        /// </summary>
        /// <typeparam name="TQueryModel">Tipo do modelo de consulta.</typeparam>
        /// <param name="deleteFilter">Express√£o de filtro usada para determinar quais registros devem ser exclu√≠dos.</param>
        /// <returns>Tarefa ass√≠ncrona representando a opera√ß√£o de exclus√£o.</returns>
        Task DeleteAsync<TQueryModel>(Expression<Func<TQueryModel, bool>> deleteFilter)
            where TQueryModel : IQueryModel;
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Interface ISynchronizeDb ‚Üí Define um contrato para sincroniza√ß√£o de modelos de consulta com o banco de dados.
‚úÖ Heran√ßa de IDisposable ‚Üí Permite liberar corretamente recursos associados ao banco, evitando vazamentos de mem√≥ria.
‚úÖ M√©todo UpsertAsync() ‚Üí Realiza inser√ß√£o ou atualiza√ß√£o de um modelo de consulta no banco, garantindo consist√™ncia dos dados.
‚úÖ M√©todo DeleteAsync() ‚Üí Permite remo√ß√£o seletiva de registros com base em um filtro espec√≠fico.
‚úÖ Uso de Express√£o Lambda como filtro ‚Üí Garante flexibilidade na defini√ß√£o de condi√ß√µes de upsert e exclus√£o.
‚úÖ Arquitetura baseada em CQRS ‚Üí Mant√©m separa√ß√£o entre leitura e escrita, garantindo escalabilidade e efici√™ncia no acesso aos dados.
‚úÖ Essa abordagem melhora a integridade dos dados, reduz inconsist√™ncias e otimiza consultas em aplica√ß√µes distribu√≠das.
*/
