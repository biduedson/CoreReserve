using System;
using System.Threading.Tasks;

namespace CoreReserve.Query.Abstractions
{
    /// <summary>
    /// Interface para reposit√≥rio somente leitura.
    /// Respons√°vel por fornecer acesso a modelos de consulta sem modificar dados no banco.
    /// </summary>
    /// <typeparam name="TQueryModel">Tipo do modelo de consulta.</typeparam>
    /// <typeparam name="TKey">Tipo da chave identificadora do modelo de consulta.</typeparam>
    public interface IReadOnlyRepository<TQueryModel, in TKey>
        where TQueryModel : IQueryModel<TKey>
        where TKey : IEquatable<TKey>
    {
        /// <summary>
        /// Obt√©m um modelo de consulta pelo identificador √∫nico de forma ass√≠ncrona.
        /// </summary>
        /// <param name="id">Identificador √∫nico do modelo de consulta.</param>
        /// <returns>Tarefa ass√≠ncrona representando a opera√ß√£o de busca, retornando o modelo de consulta.</returns>
        Task<TQueryModel> GetByIdAsync(TKey id);
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Interface IReadOnlyRepository ‚Üí Define um contrato para acesso somente leitura a modelos de consulta.
‚úÖ Uso de m√©todos gen√©ricos ‚Üí Permite manipula√ß√£o de diferentes tipos de query models sem alterar a implementa√ß√£o base.
‚úÖ Restri√ß√£o where TKey : IEquatable<TKey> ‚Üí Garante que a chave identificadora seja √∫nica e compar√°vel.
‚úÖ M√©todo GetByIdAsync() ‚Üí Recupera um modelo de consulta do banco de dados utilizando opera√ß√µes ass√≠ncronas.
‚úÖ Arquitetura baseada em CQRS ‚Üí Separa opera√ß√µes de leitura e escrita, garantindo escalabilidade e efici√™ncia.
‚úÖ Essa abordagem melhora a integridade dos dados, facilita consultas eficientes e evita modifica√ß√µes acidentais no banco.
*/
