using AutoMapper;
using CoreReserve.Core.Extensions;
using CoreReserve.Core.SharedKernel;
using CoreReserve.Domain.Entities.UserAggregate.Events;
using CoreReserve.Query.Abstractions;
using CoreReserve.Query.Application.User.Queries;
using CoreReserve.Query.QueriesModel;
using MediatR;
using Microsoft.Extensions.Logging;

namespace CoreReserve.Query.EventHandlers
{
    /// <summary>
    /// Manipulador de eventos do usu√°rio.
    /// Respons√°vel por processar eventos relacionados √† cria√ß√£o, atualiza√ß√£o e exclus√£o de usu√°rios.
    /// Atua sincronizando o banco de dados e limpando o cache para garantir integridade dos dados.
    /// </summary>
    public class UserEventHandler(
        IMapper mapper,
        ISynchronizeDb synchronizeDb,
        ICacheService cacheService,
        ILogger<UserEventHandler> logger) :
        INotificationHandler<UserCreatedEvent>,
        INotificationHandler<UserUpdatedEvent>,
        INotificationHandler<UserDeletedEvent>
    {
        /// <summary>
        /// Manipula o evento de cria√ß√£o de usu√°rio.
        /// Registra o evento, insere os dados no banco de consultas e limpa o cache.
        /// </summary>
        public async Task Handle(UserCreatedEvent notification, CancellationToken cancellationToken)
        {
            LogEvent(notification);

            var userQueryModel = mapper.Map<UserQueryModel>(notification);
            await synchronizeDb.UpsertAsync(userQueryModel, filter => filter.Id == userQueryModel.Id);
            await ClearCacheAsync(notification);
        }

        /// <summary>
        /// Manipula o evento de exclus√£o de usu√°rio.
        /// Registra o evento, remove os dados do banco de consultas e limpa o cache.
        /// </summary>
        public async Task Handle(UserDeletedEvent notification, CancellationToken cancellationToken)
        {
            LogEvent(notification);

            await synchronizeDb.DeleteAsync<UserQueryModel>(filter => filter.Email == notification.Email);
            await ClearCacheAsync(notification);
        }

        /// <summary>
        /// Manipula o evento de atualiza√ß√£o de usu√°rio.
        /// Registra o evento, atualiza os dados no banco de consultas e limpa o cache.
        /// </summary>
        public async Task Handle(UserUpdatedEvent notification, CancellationToken cancellationToken)
        {
            LogEvent(notification);

            var userQueryModel = mapper.Map<UserQueryModel>(notification);
            await synchronizeDb.UpsertAsync(userQueryModel, filter => filter.Id == userQueryModel.Id);
            await ClearCacheAsync(notification);
        }

        /// <summary>
        /// Limpa o cache relacionado ao usu√°rio afetado pelo evento.
        /// Garante que consultas futuras obtenham dados atualizados.
        /// </summary>
        private async Task ClearCacheAsync(UserBaseEvent @event)
        {
            var cacheKeys = new[] { nameof(GetAllUserQuery), $"{nameof(GetUserByIdQuery)}_{@event.Id}" };
            await cacheService.RemoveAsync(cacheKeys);
        }

        /// <summary>
        /// Registra informa√ß√µes sobre o evento, incluindo nome e modelo dos dados.
        /// </summary>
        private void LogEvent<TEvent>(TEvent @event) where TEvent : UserBaseEvent =>
            logger.LogInformation("----- Evento disparado {EventName}, modelo: {EventModel}", typeof(TEvent).Name, @event.ToJson());
    }
}

// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe UserEventHandler ‚Üí Processa eventos de usu√°rios, garantindo sincroniza√ß√£o com banco de dados e cache.
‚úÖ Implementa√ß√£o de INotificationHandler ‚Üí Define como os eventos s√£o tratados na arquitetura de mensageria.
‚úÖ Uso de AutoMapper ‚Üí Facilita a convers√£o dos eventos em modelos de consulta.
‚úÖ Intera√ß√£o com ISynchronizeDb ‚Üí Permite inser√ß√£o, atualiza√ß√£o e remo√ß√£o de usu√°rios no banco de consultas.
‚úÖ Uso de ICacheService ‚Üí Remove registros armazenados para garantir consist√™ncia nos dados consultados.
‚úÖ M√©todo LogEvent() ‚Üí Registra os eventos processados, facilitando auditoria e rastreabilidade.
‚úÖ M√©todo ClearCacheAsync() ‚Üí Remove os cacheKeys correspondentes ao usu√°rio afetado pelo evento.
‚úÖ Arquitetura baseada em CQRS ‚Üí Mant√©m separa√ß√£o entre comandos e consultas, melhorando escalabilidade.
‚úÖ Essa estrutura torna a gest√£o de eventos robusta, garantindo que os dados da aplica√ß√£o sejam sempre atualizados corretamente.
*/
