using CoreReserve.Query.Abstractions;
using CoreReserve.Query.Data.Repositories.Abstractions;
using CoreReserve.Query.QueriesModel;
using MongoDB.Driver;

namespace CoreReserve.Query.Data.Repositories
{
    /// <summary>
    /// Reposit√≥rio somente leitura para usu√°rios.
    /// Respons√°vel por recuperar informa√ß√µes de usu√°rios armazenadas em um banco NoSQL (MongoDB).
    /// </summary>
    internal class UserReadOnlyRepository(IReadDbContext readDbContext)
        : BaseReadOnlyRepository<UserQueryModel, Guid>(readDbContext), IUserReadOnlyRepository
    {
        /// <summary>
        /// Obt√©m todos os usu√°rios ordenados por nome e data de nascimento.
        /// </summary>
        /// <returns>Uma cole√ß√£o de <see cref="UserQueryModel"/>.</returns>
        public async Task<IEnumerable<UserQueryModel>> GetAllAsync()
        {
            // Define crit√©rios de ordena√ß√£o: Por nome (ascendente), depois por data de cria√ßao do usuario (descendente).
            var sort = Builders<UserQueryModel>.Sort
                .Ascending(user => user.Name)
                .Descending(user => user.CreatedAt);

            // Configura op√ß√µes de busca no banco de dados.
            var findOptions = new FindOptions<UserQueryModel>
            {
                Sort = sort
            };

            // Executa a consulta para buscar todos os usu√°rios, aplicando as op√ß√µes definidas.
            using var asyncCursor = await Collection.FindAsync(Builders<UserQueryModel>.Filter.Empty, findOptions);
            return await asyncCursor.ToListAsync();
        }
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe UserReadOnlyRepository ‚Üí Implementa um reposit√≥rio para leitura de usu√°rios no MongoDB.
‚úÖ Heran√ßa de BaseReadOnlyRepository ‚Üí Reutiliza l√≥gica de acesso ao banco de consultas.
‚úÖ M√©todo GetAllAsync() ‚Üí Recupera todos os usu√°rios ordenados por nome e data de nascimento.
‚úÖ Uso de Builders.Sort ‚Üí Permite ordena√ß√£o personalizada, garantindo que os dados sejam retornados de maneira organizada.
‚úÖ Uso de Builders.Filter.Empty ‚Üí Recupera todos os registros sem aplicar filtros espec√≠ficos.
‚úÖ Arquitetura baseada em CQRS ‚Üí Separa opera√ß√µes de leitura e escrita, garantindo escalabilidade e efici√™ncia na consulta de dados.
‚úÖ Essa abordagem melhora a performance ao lidar com grandes volumes de dados e consultas complexas.
*/
