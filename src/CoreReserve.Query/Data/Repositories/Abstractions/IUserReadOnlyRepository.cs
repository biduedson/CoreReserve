using CoreReserve.Query.Abstractions;
using CoreReserve.Query.QueriesModel;

namespace CoreReserve.Query.Data.Repositories.Abstractions
{
    /// <summary>
    /// Interface de reposit√≥rio somente leitura para clientes.
    /// Define opera√ß√µes que podem ser executadas sem modificar os dados.
    /// </summary>
    public interface IUserReadOnlyRepository : IReadOnlyRepository<UserQueryModel, Guid>
    {
        /// <summary>
        /// Obt√©m todos os clientes dispon√≠veis no banco de consultas.
        /// </summary>
        /// <returns>Uma cole√ß√£o de <see cref="CustomerQueryModel"/>.</returns>
        Task<IEnumerable<UserQueryModel>> GetAllAsync();
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Interface ICustomerReadOnlyRepository ‚Üí Define um reposit√≥rio para consultas de clientes sem modifica√ß√£o dos dados.
‚úÖ Heran√ßa de IReadOnlyRepository<CustomerQueryModel, Guid> ‚Üí Reutiliza m√©todos gen√©ricos para manipula√ß√£o de dados de consulta.
‚úÖ M√©todo GetAllAsync() ‚Üí Retorna todos os registros de clientes no banco de consultas de forma ass√≠ncrona.
‚úÖ Uso de Task<IEnumerable<T>> ‚Üí Garante que a opera√ß√£o seja executada de forma eficiente, sem bloquear a aplica√ß√£o.
‚úÖ Arquitetura baseada em CQRS ‚Üí Separa opera√ß√µes de leitura e escrita, melhorando desempenho e escalabilidade.
‚úÖ Essa abordagem melhora a consulta de dados, garantindo que apenas opera√ß√µes seguras sejam realizadas no reposit√≥rio.
*/
