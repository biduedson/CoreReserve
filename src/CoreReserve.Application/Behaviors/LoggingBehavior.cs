using System.Diagnostics;
using MediatR;
using Microsoft.Extensions.Logging;
using CoreReserve.Core.Extensions;


namespace CoreReserve.Application.Behaviors
{
    /// <summary>
    /// Comportamento de pipeline que adiciona logging ao processamento de comandos no MediatR.
    /// </summary>
    /// <typeparam name="TRequest">O tipo da requisiÃ§Ã£o.</typeparam>
    /// <typeparam name="TResponse">O tipo da resposta.</typeparam>
    public class LoggingBehavior<TRequest, TResponse>(ILogger<LoggingBehavior<TRequest, TResponse>> logger)
        : IPipelineBehavior<TRequest, TResponse> where TRequest : IRequest<TResponse>
    {
        /// <summary>
        /// Intercepta o processamento de uma requisiÃ§Ã£o, adicionando logs antes e depois da execuÃ§Ã£o.
        /// </summary>
        /// <param name="request">A requisiÃ§Ã£o a ser processada.</param>
        /// <param name="next">Delegate para invocar o prÃ³ximo comportamento no pipeline.</param>
        /// <param name="cancellationToken">Token de cancelamento.</param>
        /// <returns>A resposta da requisiÃ§Ã£o.</returns>
        public async Task<TResponse> Handle(
            TRequest request,
            RequestHandlerDelegate<TResponse> next,
            CancellationToken cancellationToken)
        {
            var commandName = request.GetGenericTypeName();

            logger.LogInformation("----- Iniciando processamento do comando '{CommandName}'", commandName);

            var timer = new Stopwatch();
            timer.Start();

            var response = await next(cancellationToken);

            timer.Stop();

            var timeTaken = timer.Elapsed.TotalSeconds;
            logger.LogInformation("----- Comando '{CommandName}' processado ({TimeTaken} segundos)", commandName, timeTaken);

            return response;
        }
    }

    // -----------------------------------------
    // ðŸ”¹ EXPLICAÃ‡ÃƒO DO CÃ“DIGO ðŸ”¹
    // -----------------------------------------
    /*
    âœ… Classe LoggingBehavior â†’ Implementa um comportamento de pipeline para registrar logs durante a execuÃ§Ã£o de comandos no MediatR. 
    âœ… MÃ©todo Handle() â†’ Intercepta a requisiÃ§Ã£o e adiciona logs antes e depois do processamento, medindo o tempo de execuÃ§Ã£o. 
    âœ… Uso de Stopwatch â†’ Mede o tempo total de processamento do comando, permitindo diagnÃ³stico de performance. 
    âœ… Uso de ILogger â†’ Registra mensagens informativas no log, facilitando depuraÃ§Ã£o e rastreabilidade. 
    âœ… Essa abordagem melhora a visibilidade sobre a execuÃ§Ã£o dos comandos, facilitando auditoria e anÃ¡lise de desempenho. 
    */
}