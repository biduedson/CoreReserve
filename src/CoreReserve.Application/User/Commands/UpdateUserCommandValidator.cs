using FluentValidation;

namespace CoreReserve.Application.User.Commands
{
    /// <summary>
    /// Validador para o comando <see cref="UpdateUserCommand"/>.
    /// Garante que os dados do cliente sejam vÃ¡lidos antes da atualizaÃ§Ã£o.
    /// </summary>
    public class UpdateUserCommandValidator : AbstractValidator<UpdateUserCommand>
    {
        /// <summary>
        /// ConfiguraÃ§Ã£o das regras de validaÃ§Ã£o para atualizaÃ§Ã£o de clientes.
        /// </summary>
        public UpdateUserCommandValidator()
        {
            // O ID do cliente nÃ£o pode estar vazio.
            RuleFor(command => command.Id)
                .NotEmpty();

            // O e-mail nÃ£o pode estar vazio, deve ter no mÃ¡ximo 254 caracteres e precisa ser um e-mail vÃ¡lido.
            RuleFor(command => command.Email)
                .NotEmpty()
                .MaximumLength(254)
                .EmailAddress();
        }
    }
}

// -----------------------------------------
// ğŸ”¹ EXPLICAÃ‡ÃƒO DO CÃ“DIGO ğŸ”¹
// -----------------------------------------
/*
âœ… Classe UpdateUserCommandValidator â†’ Define regras de validaÃ§Ã£o para o comando UpdateUserCommand. 
âœ… Uso de FluentValidation â†’ Permite uma validaÃ§Ã£o fluida e extensÃ­vel para garantir integridade dos dados. 
âœ… Regra de validaÃ§Ã£o do ID â†’ Garante que o identificador do cliente esteja preenchido corretamente. 
âœ… Regra de validaÃ§Ã£o do Email â†’ Impede e-mails invÃ¡lidos, garantindo um formato vÃ¡lido e um tamanho adequado. 
âœ… Essa abordagem evita erros, melhora a consistÃªncia dos dados e garante atualizaÃ§Ãµes seguras no sistema. 
*/
