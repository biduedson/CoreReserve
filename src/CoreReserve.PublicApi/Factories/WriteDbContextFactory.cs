using CoreReserve.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;
using System;
using System.IO;

namespace CoreReserve.PublicApi.Factories;

/// <summary>
/// F√°brica para cria√ß√£o do contexto do banco de dados `WriteDbContext`.
/// Usado especificamente para **design-time**, permitindo gera√ß√£o de migra√ß√µes pelo Entity Framework.
/// </summary>
public class WriteDbContextFactory : IDesignTimeDbContextFactory<WriteDbContext>
{
    /// <summary>
    /// Cria uma inst√¢ncia do contexto `WriteDbContext` baseada na configura√ß√£o do ambiente.
    /// Esse m√©todo √© usado para **gera√ß√£o de migra√ß√µes** via `dotnet ef migrations` e n√£o √© chamado diretamente na aplica√ß√£o.
    /// </summary>
    /// <param name="args">Par√¢metros opcionais usados pelo `IDesignTimeDbContextFactory`.</param>
    /// <returns>Uma inst√¢ncia configurada de <see cref="WriteDbContext"/>.</returns>
    public WriteDbContext CreateDbContext(string[] args)
    {
        var basePath = Directory.GetCurrentDirectory();

        // üîπ Carrega as configura√ß√µes do arquivo `appsettings.json`, vari√°veis de ambiente e `secrets.json`.
        var configuration = new ConfigurationBuilder()
            .SetBasePath(basePath)
            .AddJsonFile("appsettings.json", optional: true)
            .AddUserSecrets<WriteDbContextFactory>() // üîπ Adiciona suporte para secrets.json
            .AddEnvironmentVariables()
            .Build();

        // üîπ Obt√©m a string de conex√£o do banco de dados a partir da configura√ß√£o.
        var sqlConnection = configuration.GetSection("ConnectionStrings")["SqlConnection"];

        // üîπ Garante que a string de conex√£o est√° definida antes de continuar.
        if (string.IsNullOrEmpty(sqlConnection))
        {
            throw new InvalidOperationException("SqlConnection was not found in configuration.");
        }

        // üîπ Configura o contexto do banco de dados com a string de conex√£o definida.
        var optionsBuilder = new DbContextOptionsBuilder<WriteDbContext>();
        optionsBuilder.UseSqlServer(sqlConnection, b => b.MigrationsAssembly("CoreReserve.PublicApi"));

        return new WriteDbContext(optionsBuilder.Options);
    }
}

// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe WriteDbContextFactory ‚Üí Implementa `IDesignTimeDbContextFactory` para suporte a migra√ß√µes do EF Core.
‚úÖ M√©todo CreateDbContext() ‚Üí Instancia `WriteDbContext` com base na configura√ß√£o do ambiente.
‚úÖ Uso de ConfigurationBuilder ‚Üí Carrega configura√ß√µes de `appsettings.json`, `secrets.json` e vari√°veis de ambiente.
‚úÖ Uso de `secrets.json` ‚Üí Protege dados sens√≠veis, como strings de conex√£o do banco.
‚úÖ Valida√ß√£o da string de conex√£o ‚Üí Garante que `SqlConnection` esteja definida antes de instanciar o contexto.
‚úÖ Configura√ß√£o do banco de dados ‚Üí Define SQL Server como provedor e especifica o assembly de migra√ß√µes.
‚úÖ Arquitetura baseada em boas pr√°ticas ‚Üí Mant√©m separa√ß√£o entre **configura√ß√£o** e **execu√ß√£o**, facilitando manuten√ß√£o.
‚úÖ Essa abordagem melhora a seguran√ßa e facilita a execu√ß√£o de migra√ß√µes do banco de dados.
*/
