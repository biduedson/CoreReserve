using System.IO.Compression;
using Asp.Versioning;
using CoreReserve.Core.Extensions;
using CoreReserve.Core;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.ResponseCompression;
using CoreReserve.Infrastructure.Data;
using CoreReserve.Application;
using CoreReserve.Query;
using CoreReserve.PublicApi.Extensions;
using CorrelationId.DependencyInjection;
using StackExchange.Profiling;
using FluentValidation;
using FluentValidation.Resources;
using System.Globalization;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using HealthChecks.UI.Client;
using Scalar.AspNetCore;
using CorrelationId;
using CoreReserve.Infrastructure.Security.Extensions;

#region Application Configuration

/// <summary>
/// Ponto de entrada principal da aplica√ß√£o Core Reserve API.
/// Configura todos os servi√ßos, middlewares e pipeline de requisi√ß√µes HTTP
/// seguindo padr√µes de Clean Architecture e CQRS.
/// </summary>
var builder = WebApplication.CreateBuilder(args);

#endregion

#region Core Services Configuration

/// <summary>
/// Configura√ß√£o de servi√ßos fundamentais do ASP.NET Core incluindo
/// compress√£o de resposta, serializa√ß√£o JSON customizada e roteamento otimizado.
/// </summary>
builder.Services
    .Configure<GzipCompressionProviderOptions>(compressionOptions => compressionOptions.Level = CompressionLevel.Fastest)
    .Configure<JsonOptions>(jsonOptions => jsonOptions.JsonSerializerOptions.Configure())
    .Configure<RouteOptions>(routeOptions => routeOptions.LowercaseUrls = true)
    .AddHttpClient()
    .AddHttpContextAccessor()
    .AddResponseCompression(compressionOptions =>
    {
        compressionOptions.EnableForHttps = true;
        compressionOptions.Providers.Add<GzipCompressionProvider>();
    })
    .AddEndpointsApiExplorer();

#endregion

#region API Versioning Configuration

/// <summary>
/// Configura√ß√£o avan√ßada de versionamento da API com suporte a m√∫ltiplas vers√µes
/// simult√¢neas e documenta√ß√£o autom√°tica de vers√µes dispon√≠veis.
/// </summary>
builder.Services
    .AddApiVersioning(versioningOptions =>
    {
        versioningOptions.DefaultApiVersion = ApiVersion.Default;
        versioningOptions.ReportApiVersions = true;
        versioningOptions.AssumeDefaultVersionWhenUnspecified = true;
    })
    .AddApiExplorer(explorerOptions =>
    {
        explorerOptions.GroupNameFormat = "'v'VVV";
        explorerOptions.SubstituteApiVersionInUrl = true;
    });

#endregion

#region Documentation and Security Services

/// <summary>
/// Configura√ß√£o de servi√ßos de documenta√ß√£o OpenAPI, prote√ß√£o de dados
/// e controladores MVC com comportamento personalizado para APIs.
/// </summary>
builder.Services.AddOpenApi();
builder.Services.AddDataProtection();
builder.Services.AddControllers()
    .ConfigureApiBehaviorOptions(behaviorOptions =>
    {
        behaviorOptions.SuppressMapClientErrors = true;
        behaviorOptions.SuppressModelStateInvalidFilter = true;
    })
    .AddJsonOptions(_ => { });

#endregion

#region CORS Configuration

/// <summary>
/// Configura√ß√£o de pol√≠tica CORS diferenciada por ambiente.
/// Desenvolvimento: permissivo para facilitar testes.
/// Produ√ß√£o: restritivo para seguran√ßa.
/// </summary>
builder.Services.AddCors(options =>
{
    options.AddPolicy("ScalarPolicy", policy =>
    {
        if (builder.Environment.IsDevelopment())
        {
            // Em desenvolvimento: permite qualquer origem
            policy.SetIsOriginAllowed(_ => true)
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        }
        else
        {
            // Em produ√ß√£o: URLs espec√≠ficas
            policy.WithOrigins("https://your-production-domain.com")
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        }
    });
});

#endregion

#region Application-Specific Services

/// <summary>
/// Registro de todos os servi√ßos espec√≠ficos da aplica√ß√£o Core Reserve
/// seguindo arquitetura Clean Architecture com CQRS, Repository Pattern
/// e separa√ß√£o de contextos de leitura/escrita para otimiza√ß√£o de performance.
/// </summary>
builder.Services
    .ConfigureAppSettings()
    .AddInfrastructure()
    .AddCommandHandlers()
    .AddQueryHandlers()
    .AddWriteDbContext(builder.Environment)
    .AddWriteOnlyRepositories()
    .AddReadDbContext()
    .AddReadOnlyRepositories()
    .AddCacheService(builder.Configuration)
    .AddHealthChecks(builder.Configuration)
    .AddDefaultCorrelationId()
    .AddJwtAuthentication(builder.Configuration);

#endregion

#region Performance Monitoring

/// <summary>
/// Configura√ß√£o do MiniProfiler para monitoramento detalhado de performance.
/// Permite an√°lise em tempo real de queries SQL, tempo de resposta
/// e gargalos de performance da aplica√ß√£o.
/// Documenta√ß√£o: https://miniprofiler.com/dotnet/
/// </summary>
builder.Services.AddMiniProfiler(options =>
{
    // Rota para exibi√ß√£o do perfil de execu√ß√£o: /profiler/results-index
    options.RouteBasePath = "/profiler";
    options.ColorScheme = ColorScheme.Dark;
    options.EnableServerTimingHeader = true;
    options.TrackConnectionOpenClose = true;
    options.EnableDebugMode = builder.Environment.IsDevelopment();
}).AddEntityFramework();

#endregion

#region Service Provider Validation

/// <summary>
/// Configura√ß√£o de valida√ß√£o rigorosa do container de depend√™ncias.
/// Garante detec√ß√£o precoce de problemas de configura√ß√£o de DI
/// e valida escopos de servi√ßos em ambiente de desenvolvimento.
/// </summary>
builder.Host.UseDefaultServiceProvider((context, serviceProviderOptions) =>
{
    serviceProviderOptions.ValidateScopes = context.HostingEnvironment.IsDevelopment();
    serviceProviderOptions.ValidateOnBuild = true;
});

#endregion

#region Kestrel Server Configuration

/// <summary>
/// Configura√ß√£o espec√≠fica do servidor Kestrel com remo√ß√£o do header
/// de servidor por quest√µes de seguran√ßa (security through obscurity).
/// </summary>
builder.WebHost.UseKestrel(kestrelOptions => kestrelOptions.AddServerHeader = false);

#endregion

#region FluentValidation Global Settings

/// <summary>
/// Configura√ß√£o global do FluentValidation para padroniza√ß√£o
/// de resolu√ß√£o de nomes de propriedades e idioma das mensagens de valida√ß√£o.
/// </summary>
ValidatorOptions.Global.DisplayNameResolver = (_, member, _) => member?.Name;
ValidatorOptions.Global.LanguageManager = new LanguageManager { Enabled = true, Culture = new CultureInfo("en-US") };

#endregion

#region Application Pipeline

/// <summary>
/// Constru√ß√£o da aplica√ß√£o com todos os servi√ßos configurados.
/// </summary>
var app = builder.Build();

#endregion

#region Development Environment Configuration

/// <summary>
/// Configura√ß√£o espec√≠fica para ambiente de desenvolvimento.
/// Habilita p√°gina detalhada de exce√ß√µes para facilitar debugging
/// e resolu√ß√£o de problemas durante o desenvolvimento.
/// </summary>
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

#endregion

#region Health Checks Endpoint

/// <summary>
/// Configura√ß√£o do endpoint de Health Checks para monitoramento
/// autom√°tico da sa√∫de da aplica√ß√£o e suas depend√™ncias.
/// Endpoint acess√≠vel em: GET /health
/// </summary>
app.UseHealthChecks("/health", new HealthCheckOptions
{
    Predicate = _ => true,
    ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
});

#endregion

#region OpenAPI Documentation

/// <summary>
/// Mapeamento do endpoint OpenAPI para gera√ß√£o autom√°tica
/// da especifica√ß√£o da API baseada nos controladores e modelos.
/// </summary>
app.MapOpenApi();

#endregion

#region Scalar API Documentation

/// <summary>
/// Configura√ß√£o do Scalar como interface moderna de documenta√ß√£o da API.
/// Substitui o Swagger UI tradicional com uma experi√™ncia mais rica.
/// Interface acess√≠vel em: /scalar/v1
/// </summary>
app.MapScalarApiReference(scalarOptions =>
{
    scalarOptions.DarkMode = true;
    scalarOptions.DotNetFlag = false;
    scalarOptions.HideDownloadButton = true;
    scalarOptions.HideModels = true;
    scalarOptions.Title = "Core Reserve";
});

#endregion

#region Middleware Pipeline

/// <summary>
/// Configura√ß√£o do pipeline de middlewares na ordem espec√≠fica.
/// A ordem √© cr√≠tica pois cada middleware processa requisi√ß√µes
/// sequencialmente e pode afetar o comportamento dos subsequentes.
/// </summary>
app.UseCors("ScalarPolicy");       // Pol√≠tica de CORS para requisi√ß√µes cross-origin
app.UseErrorHandling();           // Tratamento global centralizado de erros
app.UseResponseCompression();     // Compress√£o GZIP das respostas HTTP
app.UseHttpsRedirection();        // Redirecionamento for√ßado para HTTPS
app.UseMiniProfiler();           // Coleta de m√©tricas de performance
app.UseCorrelationId();          // Rastreamento distribu√≠do de requisi√ß√µes
app.UseAuthentication();         // Verifica√ß√£o de identidade do usu√°rio
app.UseAuthorization();          // Verifica√ß√£o de permiss√µes de acesso
app.MapControllers();            // Mapeamento de rotas para controladores

#endregion

#region Application Startup

/// <summary>
/// Inicializa√ß√£o ass√≠ncrona da aplica√ß√£o com todos os servi√ßos
/// configurados e pipeline de middlewares estabelecido.
/// </summary>
await app.RunAppAsync();

#endregion

/*
üöÄ EXPLICA√á√ÉO DETALHADA DO C√ìDIGO CORE RESERVE API

üìã VIS√ÉO GERAL:
O Program.cs representa o cora√ß√£o da aplica√ß√£o Core Reserve API, implementando
uma arquitetura enterprise-ready com Clean Architecture, CQRS e m√∫ltiplas
camadas de observabilidade e seguran√ßa.

üèóÔ∏è ARQUITETURA IMPLEMENTADA:
- üèõÔ∏è Clean Architecture: Separa√ß√£o clara de responsabilidades
- ‚ö° CQRS: Command Query Responsibility Segregation
- üóÑÔ∏è Repository Pattern: Abstra√ß√£o de acesso a dados
- üíâ Dependency Injection: Invers√£o de controle nativa
- üîÑ Middleware Pattern: Pipeline de processamento de requisi√ß√µes

üîß COMPONENTES PRINCIPAIS:

1Ô∏è‚É£ CONFIGURA√á√ÉO DE SERVI√áOS CORE:
   üì¶ Compress√£o GZIP para otimiza√ß√£o de transfer√™ncia
   üîÑ Serializa√ß√£o JSON personalizada
   üìç Roteamento com URLs em min√∫sculas
   üåê Cliente HTTP configurado
   üìä Compress√£o habilitada para HTTPS

2Ô∏è‚É£ VERSIONAMENTO DE API:
   üìù Suporte a m√∫ltiplas vers√µes simult√¢neas
   üìã Documenta√ß√£o autom√°tica de vers√µes
   üîó Substitui√ß√£o de vers√£o em URLs
   üìä Relat√≥rios de vers√µes dispon√≠veis

3Ô∏è‚É£ DOCUMENTA√á√ÉO E SEGURAN√áA:
   üìö OpenAPI/Swagger autom√°tico
   üîí Prote√ß√£o de dados integrada
   üéõÔ∏è Controladores MVC otimizados
   üåç CORS diferenciado por ambiente

4Ô∏è‚É£ SERVI√áOS ESPEC√çFICOS DA APLICA√á√ÉO:
   ‚öôÔ∏è ConfigureAppSettings(): Configura√ß√µes centralizadas
   üèóÔ∏è AddInfrastructure(): Servi√ßos de infraestrutura
   üìù AddCommandHandlers(): Handlers de comando (CQRS)
   üîç AddQueryHandlers(): Handlers de consulta (CQRS)
   üíæ AddWriteDbContext(): Contexto otimizado para escrita
   üìñ AddReadDbContext(): Contexto otimizado para leitura
   üóÇÔ∏è AddRepositories(): Padr√£o Repository implementado
   ‚ö° AddCacheService(): Sistema de cache distribu√≠do
   üè• AddHealthChecks(): Monitoramento de depend√™ncias
   üîó AddCorrelationId(): Rastreamento distribu√≠do
   üîê AddJwtAuthentication(): Autentica√ß√£o JWT Bearer

5Ô∏è‚É£ MONITORAMENTO E OBSERVABILIDADE:
   üìä MiniProfiler: An√°lise de performance em tempo real
   üè• Health Checks: Monitoramento de sa√∫de dos servi√ßos
   üîó Correlation ID: Rastreamento de requisi√ß√µes distribu√≠das
   üìà Entity Framework Profiling: An√°lise de queries SQL

6Ô∏è‚É£ CONFIGURA√á√ïES DE SEGURAN√áA:
   üõ°Ô∏è Remo√ß√£o do header Server (security through obscurity)
   üîí Redirecionamento for√ßado para HTTPS
   üõ°Ô∏è Prote√ß√£o de dados criptogr√°fica
   ‚úÖ Valida√ß√£o de escopos em desenvolvimento
   üîê Autentica√ß√£o e autoriza√ß√£o em camadas

7Ô∏è‚É£ PIPELINE DE MIDDLEWARES (ordem cr√≠tica):
   üåç CORS Policy: Controle de requisi√ß√µes cross-origin
   üö® Error Handling: Captura global de exce√ß√µes
   üì¶ Response Compression: Otimiza√ß√£o de transfer√™ncia
   üîí HTTPS Redirection: For√ßa uso de protocolo seguro
   üìä MiniProfiler: Coleta de m√©tricas
   üîó Correlation ID: Rastreamento de requisi√ß√µes
   üîê Authentication: Verifica√ß√£o de identidade
   ‚öñÔ∏è Authorization: Controle de permiss√µes
   üéØ Controllers: Roteamento final

8Ô∏è‚É£ FUNCIONALIDADES AVAN√áADAS:
   üìö Scalar API Reference: Interface moderna de documenta√ß√£o
   ‚úÖ FluentValidation: Sistema avan√ßado de valida√ß√£o
   üåê Valida√ß√£o i18n: Suporte a internacionaliza√ß√£o
   üîß Configura√ß√£o condicional por ambiente

üéØ PADR√ïES DE DESIGN UTILIZADOS:
- üíâ Dependency Injection Pattern
- üèóÔ∏è Builder Pattern (configura√ß√£o fluente)
- üè≠ Factory Pattern (cria√ß√£o de contextos)
- üóÑÔ∏è Repository Pattern (abstra√ß√£o de dados)
- ‚ö° CQRS Pattern (separa√ß√£o comando/consulta)
- üîÑ Middleware Pattern (pipeline de processamento)
- ‚öôÔ∏è Options Pattern (configura√ß√µes tipadas)

üöÄ BENEF√çCIOS DA ARQUITETURA:
- üìà Escalabilidade: Contextos separados para leitura/escrita
- üîß Manutenibilidade: Responsabilidades bem definidas
- üß™ Testabilidade: DI facilita cria√ß√£o de testes
- üëÅÔ∏è Observabilidade: Monitoramento completo da aplica√ß√£o
- ‚ö° Performance: Cache, compress√£o e profiling integrados
- üõ°Ô∏è Seguran√ßa: M√∫ltiplas camadas de prote√ß√£o
- üìö Documenta√ß√£o: Gera√ß√£o autom√°tica e interativa
- üîÑ Confiabilidade: Health checks e correlation tracking

üí° CASOS DE USO:
- APIs empresariais de alta escala
- Sistemas com requisitos rigorosos de observabilidade
- Aplica√ß√µes que necessitam versionamento de API
- Sistemas com separa√ß√£o clara de leitura/escrita
- Aplica√ß√µes que requerem documenta√ß√£o autom√°tica
- APIs com necessidades de cache distribu√≠do

Esta configura√ß√£o representa o estado da arte em aplica√ß√µes .NET modernas,
implementando todas as pr√°ticas recomendadas para sistemas enterprise em produ√ß√£o.
*/