using System.Net.Mime;
using CoreReserve.Core.Extensions;
using CoreReserve.PublicApi.Models;

namespace CoreReserve.PublicApi.Middlewares
{
    /// <summary>
    /// Middleware respons√°vel por tratar erros globais na API.
    /// Intercepta exce√ß√µes n√£o tratadas e retorna uma resposta consistente ao cliente.
    /// </summary>
    public class ErrorHandlingMiddleware(
        RequestDelegate next,
        ILogger<ErrorHandlingMiddleware> logger,
        IHostEnvironment environment)
    {
        /// <summary>
        /// Mensagem padr√£o para erros internos do servidor.
        /// </summary>
        private const string ErrorMessage = "An internal error occurred while processing your request.";

        /// <summary>
        /// Resposta padronizada em formato JSON para erros internos.
        /// </summary>
        private static readonly string ApiResponseJson = ApiResponse.InternalServerError(ErrorMessage).ToJson();

        /// <summary>
        /// Intercepta requisi√ß√µes, executa o pr√≥ximo middleware e captura exce√ß√µes inesperadas.
        /// </summary>
        /// <param name="httpContext">Contexto da requisi√ß√£o.</param>
        /// <returns>Tarefa ass√≠ncrona representando a execu√ß√£o do middleware.</returns>
        public async Task Invoke(HttpContext httpContext)
        {
            try
            {
                // Passa a requisi√ß√£o para o pr√≥ximo middleware da pipeline.
                await next(httpContext);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "An unexpected exception was thrown: {Message}", ex.Message);

                // Define o c√≥digo de status HTTP como erro interno do servidor (500).
                httpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;

                // Se estiver em ambiente de desenvolvimento, retorna detalhes da exce√ß√£o como texto.
                if (environment.IsDevelopment())
                {
                    httpContext.Response.ContentType = MediaTypeNames.Text.Plain;
                    await httpContext.Response.WriteAsync(ex.ToString());
                }
                else
                {
                    // Em ambiente de produ√ß√£o, retorna uma mensagem gen√©rica em JSON.
                    httpContext.Response.ContentType = MediaTypeNames.Application.Json;
                    await httpContext.Response.WriteAsync(ApiResponseJson);
                }
            }
        }
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe ErrorHandlingMiddleware ‚Üí Middleware global para captura de erros na API.
‚úÖ Uso de RequestDelegate ‚Üí Permite que o middleware execute o pr√≥ximo na cadeia antes de capturar erros.
‚úÖ Uso de ILogger ‚Üí Loga erros inesperados para diagn√≥stico e auditoria.
‚úÖ Uso de IHostEnvironment ‚Üí Diferencia ambientes de desenvolvimento e produ√ß√£o.
‚úÖ Comportamento da resposta:
   üîπ Em **desenvolvimento**, exibe detalhes completos da exce√ß√£o em formato de texto.
   üîπ Em **produ√ß√£o**, retorna uma mensagem gen√©rica em JSON para evitar exposi√ß√£o de informa√ß√µes sens√≠veis.
‚úÖ M√©todo Invoke() ‚Üí Executa a requisi√ß√£o e captura exce√ß√µes, garantindo um tratamento global de erros.
‚úÖ Arquitetura baseada em Middlewares ‚Üí Modulariza o tratamento de erros e evita duplica√ß√£o de c√≥digo.
‚úÖ Essa abordagem melhora a estabilidade da API e facilita a manuten√ß√£o de logs e rastreamento de erros.
*/
