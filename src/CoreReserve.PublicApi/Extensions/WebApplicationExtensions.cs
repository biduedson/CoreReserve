using System;
using System.Threading.Tasks;
using AutoMapper;
using CoreReserve.Infrastructure.Data.Context;
using CoreReserve.Query.Abstractions;
using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
namespace CoreReserve.PublicApi.Extensions
{
    /// <summary>
    /// Classe de extens√£o para a configura√ß√£o do ciclo de vida da aplica√ß√£o Web.
    /// Respons√°vel por valida√ß√£o de mapeamentos, migra√ß√£o de banco de dados e inicializa√ß√£o da API.
    /// </summary>
    internal static class WebApplicationExtensions
    {
        /// <summary>
        /// Executa o ciclo de inicializa√ß√£o completo da aplica√ß√£o, incluindo configura√ß√£o do AutoMapper e migra√ß√£o de bancos de dados.
        /// </summary>
        /// <param name="app">Inst√¢ncia da aplica√ß√£o Web.</param>
        public static async Task RunAppAsync(this WebApplication app)
        {
            await using var serviceScope = app.Services.CreateAsyncScope();

            var mapper = serviceScope.ServiceProvider.GetRequiredService<IMapper>();

            app.Logger.LogInformation("----- AutoMapper: validando os mapeamentos...");

            // Valida se as configura√ß√µes do AutoMapper est√£o corretas antes da inicializa√ß√£o.
            mapper.ConfigurationProvider.AssertConfigurationIsValid();

            // Compila os mapeamentos para melhorar a performance das convers√µes entre objetos.
            mapper.ConfigurationProvider.CompileMappings();

            app.Logger.LogInformation("----- AutoMapper: mapeamentos validados com sucesso!");

            // Executa a migra√ß√£o dos bancos de dados para garantir que est√£o atualizados.
            await app.MigrateDataBasesAsync(serviceScope);

            app.Logger.LogInformation("----- Aplica√ß√£o est√° iniciando...");

            await app.RunAsync();
        }

        /// <summary>
        /// Realiza a migra√ß√£o dos bancos de dados da aplica√ß√£o, garantindo que estejam atualizados.
        /// </summary>
        /// <param name="app">Inst√¢ncia da aplica√ß√£o Web.</param>
        /// <param name="serviceScope">Escopo do servi√ßo para obter depend√™ncias.</param>
        private static async Task MigrateDataBasesAsync(this WebApplication app, AsyncServiceScope serviceScope)
        {
            await using var writeDbContext = serviceScope.ServiceProvider.GetRequiredService<WriteDbContext>();
            await using var eventStoreDbContext = serviceScope.ServiceProvider.GetRequiredService<EventStoreDbContext>();
            using var readDbContext = serviceScope.ServiceProvider.GetRequiredService<IReadDbContext>();

            try
            {
                await app.MigrateDbContextAsync(writeDbContext);
                await app.MigrateDbContextAsync(eventStoreDbContext);
                await app.MigrateMongoDbContextAsync(readDbContext);
            }
            catch (Exception ex)
            {
                app.Logger.LogError(ex, "Ocorreu uma exce√ß√£o ao inicializar a aplica√ß√£o: {Message}", ex.Message);
                throw;
            }
        }

        /// <summary>
        /// Realiza a migra√ß√£o do banco de dados relacional utilizando Entity Framework.
        /// </summary>
        /// <typeparam name="TDbContext">Tipo do contexto do banco de dados.</typeparam>
        /// <param name="app">Inst√¢ncia da aplica√ß√£o Web.</param>
        /// <param name="dbContext">Contexto do banco de dados a ser migrado.</param>
        private static async Task MigrateDbContextAsync<TDbContext>(this WebApplication app, TDbContext dbContext)
            where TDbContext : DbContext
        {
            var dbName = dbContext.Database.GetDbConnection().Database;

            app.Logger.LogInformation("----- {DbName}: verificando migra√ß√µes pendentes...", dbName);

            if (dbContext.Database.HasPendingModelChanges())
            {
                app.Logger.LogInformation("----- {DbName}: criando e migrando o banco de dados...", dbName);

                await dbContext.Database.MigrateAsync();

                app.Logger.LogInformation("----- {DbName}: banco de dados migrado com sucesso!", dbName);
            }
            else
            {
                app.Logger.LogInformation("----- {DbName}: todas as migra√ß√µes est√£o atualizadas.", dbName);
            }
        }

        /// <summary>
        /// Executa a cria√ß√£o de cole√ß√µes no banco de dados MongoDB para garantir que as estruturas estejam dispon√≠veis.
        /// </summary>
        /// <param name="app">Inst√¢ncia da aplica√ß√£o Web.</param>
        /// <param name="readDbContext">Contexto de leitura do MongoDB.</param>
        private static async Task MigrateMongoDbContextAsync(this WebApplication app, IReadDbContext readDbContext)
        {
            app.Logger.LogInformation("----- MongoDB: criando cole√ß√µes...");

            await readDbContext.CreateCollectionsAsync();

            app.Logger.LogInformation("----- MongoDB: cole√ß√µes criadas com sucesso!");
        }
    }
}
// -----------------------------------------
// üîπ EXPLICA√á√ÉO DETALHADA üîπ
// -----------------------------------------

/*
‚úÖ Classe WebApplicationExtensions ‚Üí Gerencia o ciclo de inicializa√ß√£o e migra√ß√£o dos bancos de dados.
‚úÖ M√©todo RunAppAsync() ‚Üí Executa valida√ß√µes, migra√ß√µes e inicializa a aplica√ß√£o Web.
‚úÖ M√©todo MigrateDataBasesAsync() ‚Üí Organiza a migra√ß√£o de bancos relacionais (Entity Framework) e NoSQL (MongoDB).
‚úÖ M√©todo MigrateDbContextAsync() ‚Üí Atualiza bancos de dados relacionais, verificando migra√ß√µes pendentes.
‚úÖ M√©todo MigrateMongoDbContextAsync() ‚Üí Garante a cria√ß√£o de cole√ß√µes no banco MongoDB antes da execu√ß√£o da aplica√ß√£o.
‚úÖ Uso de AutoMapper ‚Üí Valida e compila mapeamentos para melhor performance na convers√£o de objetos.
‚úÖ Uso de logging ‚Üí Registra eventos importantes para auditoria e diagn√≥stico de erros.
‚úÖ Arquitetura baseada em extens√µes ‚Üí Modulariza o processo de inicializa√ß√£o, tornando o c√≥digo mais organizado e reutiliz√°vel.
‚úÖ Essa abordagem melhora a confiabilidade da aplica√ß√£o e facilita a manuten√ß√£o do banco de dados.
*/
