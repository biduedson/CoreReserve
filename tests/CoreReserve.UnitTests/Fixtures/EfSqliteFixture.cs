using CoreReserve.Infrastructure.Data.Context;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;

namespace CoreReserve.UnitTests.Fixtures
{
    /// <summary>
    /// Fixture para testes unit√°rios que utiliza SQLite em mem√≥ria com Entity Framework.
    /// Implementa IAsyncLifetime para gerenciamento do ciclo de vida dos testes e
    /// IDisposable para libera√ß√£o adequada de recursos.
    /// </summary>
    /// <remarks>
    /// Esta classe √© utilizada para criar um ambiente de teste isolado com banco de dados
    /// em mem√≥ria, garantindo que cada teste execute em um contexto limpo e independente.
    /// </remarks>
    public class EfSqliteFixture : IAsyncLifetime, IDisposable
    {
        #region Constantes e Campos Privados

        // String de conex√£o para banco SQLite em mem√≥ria.
        private const string ConnectionString = "Data Source=:memory:";

        // Conex√£o SQLite que ser√° mantida aberta durante os testes.
        private readonly SqliteConnection _connection;

        // Flag para detectar chamadas redundantes do Dispose.
        private bool _disposed;

        #endregion

        #region Construtor

        /// <summary>
        /// Inicializa uma nova inst√¢ncia da classe EfSqliteFixture.
        /// Configura a conex√£o SQLite em mem√≥ria e cria o contexto do Entity Framework.
        /// </summary>
        public EfSqliteFixture()
        {
            // Cria e abre a conex√£o SQLite em mem√≥ria
            _connection = new SqliteConnection(ConnectionString);
            _connection.Open();

            // Configura o DbContext para usar SQLite com a conex√£o criada
            var builder = new DbContextOptionsBuilder<WriteDbContext>().UseSqlite(_connection);
            Context = new WriteDbContext(builder.Options);
        }

        #endregion

        #region Propriedades P√∫blicas

        /// <summary>
        /// Contexto do Entity Framework configurado para usar SQLite em mem√≥ria.
        /// Utilizado pelos testes para intera√ß√£o com o banco de dados.
        /// </summary>
        public WriteDbContext Context { get; }

        #endregion

        #region Implementa√ß√£o IAsyncLifetime

        /// <summary>
        /// Inicializa o ambiente de teste de forma ass√≠ncrona.
        /// Remove o banco existente (se houver) e cria um novo schema limpo.
        /// </summary>
        /// <returns>Task representando a opera√ß√£o ass√≠ncrona</returns>
        public async Task InitializeAsync()
        {
            // Garante que o banco seja deletado antes de criar um novo
            await Context.Database.EnsureDeletedAsync();

            // Cria o schema do banco de dados com base no modelo
            await Context.Database.EnsureCreatedAsync();
        }

        /// <summary>
        /// Limpa o ambiente ap√≥s a execu√ß√£o dos testes.
        /// Implementa√ß√£o vazia pois a limpeza √© feita no Dispose.
        /// </summary>
        /// <returns>Task completada</returns>
        public Task DisposeAsync() => Task.CompletedTask;

        #endregion

        #region Implementa√ß√£o IDisposable

        /// <summary>
        /// Finalizer que garante a libera√ß√£o de recursos n√£o gerenciados.
        /// </summary>
        ~EfSqliteFixture() => Dispose(false);

        /// <summary>
        /// Implementa√ß√£o p√∫blica do padr√£o Dispose.
        /// Libera todos os recursos e suprime a finaliza√ß√£o.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Implementa√ß√£o protegida do padr√£o Dispose.
        /// Libera recursos gerenciados e n√£o gerenciados conforme necess√°rio.
        /// </summary>
        /// <param name="disposing">
        /// True se chamado pelo m√©todo Dispose(); false se chamado pelo finalizer
        /// </param>
        protected virtual void Dispose(bool disposing)
        {
            // Evita m√∫ltiplas chamadas de dispose
            if (_disposed)
                return;

            // Libera recursos gerenciados (objetos que implementam IDisposable)
            if (disposing)
            {
                _connection?.Dispose();
                Context?.Dispose();
            }

            // Marca como disposed para evitar chamadas futuras
            _disposed = true;
        }

        #endregion
    }
}

/*
üß™ EXPLICA√á√ÉO DA CLASSE EfSqliteFixture

üìã PROP√ìSITO:
Fixture de teste que cria um ambiente isolado com SQLite em mem√≥ria para testes
unit√°rios do Entity Framework, garantindo execu√ß√£o r√°pida e independente.

üîß CARACTER√çSTICAS PRINCIPAIS:
‚Ä¢ BANCO EM MEM√ìRIA: SQLite na RAM para velocidade m√°xima
‚Ä¢ ISOLAMENTO: Cada teste executa com banco limpo e independente  
‚Ä¢ CICLO DE VIDA: Gerenciamento autom√°tico via IAsyncLifetime e IDisposable
‚Ä¢ INTEGRA√á√ÉO: Compatible com xUnit e Entity Framework

‚ö° FLUXO DE EXECU√á√ÉO:
1. Construtor ‚Üí Cria conex√£o SQLite + DbContext
2. InitializeAsync() ‚Üí Recria schema limpo
3. Teste executa ‚Üí Usa Context para opera√ß√µes
4. Dispose() ‚Üí Libera recursos automaticamente

üöÄ VANTAGENS:
- Testes ultrarr√°pidos (mem√≥ria vs disco)
- Zero configura√ß√£o de banco externo
- Isolamento total entre testes
- Gerenciamento autom√°tico de recursos
- Compatibilidade completa com EF Core

üí° USO T√çPICO:
```csharp
public class MeuTeste : IClassFixture<EfSqliteFixture>
{
    private readonly EfSqliteFixture _fixture;
    
    public MeuTeste(EfSqliteFixture fixture) => _fixture = fixture;
    
    [Fact]
    public async Task DeveSalvar()
    {
        _fixture.Context.Add(entidade);
        await _fixture.Context.SaveChangesAsync();
        // Assert...
    }
}
```
*/