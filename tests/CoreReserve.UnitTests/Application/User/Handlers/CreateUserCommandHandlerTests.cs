using Ardalis.Result;
using Bogus;
using CoreReserve.Application.User.Commands;
using CoreReserve.Application.User.Handlers;
using CoreReserve.Core.SharedKernel;
using CoreReserve.Domain.Entities.UserAggregate;
using CoreReserve.Domain.Factories;
using CoreReserve.Infrastructure.Data;
using CoreReserve.Infrastructure.Data.Repositories;
using CoreReserve.UnitTests.Fixtures;
using FluentAssertions;
using MediatR;
using Microsoft.Extensions.Logging;
using NSubstitute;
using Xunit.Categories;

namespace CoreReserve.UnitTests.Application.User.Handlers
{
    /// <summary>
    /// Testes unit√°rios para a classe CreateUserCommandHandler.
    /// Verifica os cen√°rios de cria√ß√£o de usu√°rio: sucesso, email duplicado e valida√ß√£o inv√°lida.
    /// </summary>
    [UnitTest]
    public class CreateUserCommandHandlerTests(EfSqliteFixture fixture) : IClassFixture<EfSqliteFixture>
    {
        // Validador reutilizado em todos os testes
        private readonly CreateUserCommandValidator _validator = new();

        /// <summary>
        /// Testa se um comando v√°lido para cria√ß√£o de usu√°rio retorna resultado de sucesso.
        /// </summary>
        [Fact]
        public async Task Add_ValidCommand_ShouldReturnsCreatedResult()
        {
            //Arrange
            var command = new Faker<CreateUserCommand>()
            .RuleFor(command => command.Name, faker => faker.Internet.UserName())
            .RuleFor(command => command.Gender, faker => faker.PickRandom<EGender>())
            .RuleFor(command => command.Email, faker => faker.Person.Email.ToLowerInvariant())
            .RuleFor(command => command.Password, faker => faker.PickRandom("Corret123@"))
            .Generate();

            var unitOfWork = new UnitOfWork(
                fixture.Context,
                Substitute.For<IEventStoreRepository>(),
                Substitute.For<IMediator>(),
                Substitute.For<ILogger<UnitOfWork>>());

            var handler = new CreateUserCommandHandler(
                _validator,
                new UserWriteOnlyRepository(fixture.Context),
                unitOfWork);

            // Act
            var act = await handler.Handle(command, CancellationToken.None);

            // Assert
            act.Should().NotBeNull();
            act.IsCreated().Should().BeTrue();
            act.Value.Should().NotBeNull();
            act.Value.Id.Should().NotBe(Guid.Empty);
        }

        /// <summary>
        /// Testa se um comando com email duplicado retorna resultado de falha.
        /// </summary>
        [Fact]
        public async Task Add_DuplicateEmailCommand_ShouldReturnsFailResult()
        {
            //Arrange
            var command = new Faker<CreateUserCommand>()
                 .RuleFor(command => command.Name, faker => faker.Internet.UserName())
            .RuleFor(command => command.Gender, faker => faker.PickRandom<EGender>())
            .RuleFor(command => command.Email, faker => faker.Person.Email.ToLowerInvariant())
            .RuleFor(command => command.Password, faker => faker.PickRandom("Corret123@"))
            .Generate();

            var repository = new UserWriteOnlyRepository(fixture.Context);
            repository.Add(UserFactory.Create(
                command.Name,
                command.Gender,
                command.Email,
                command.Password
            ));

            await fixture.Context.SaveChangesAsync();
            fixture.Context.ChangeTracker.Clear();

            var handler = new CreateUserCommandHandler(
                _validator,
                repository,
                Substitute.For<IUnitOfWork>());

            //Act
            var act = await handler.Handle(command, CancellationToken.None);

            //Assert
            act.Should().NotBeNull();
            act.IsSuccess.Should().BeFalse();
            act.Errors.Should()
                .NotBeNullOrEmpty()
                .And.OnlyHaveUniqueItems()
                .And.Contain(errorMessage => errorMessage == "The provided email address is already in use.");
        }

        /// <summary>
        /// Testa se um comando inv√°lido retorna resultado de falha com erros de valida√ß√£o.
        /// </summary>
        [Fact]
        public async Task Add_InvalidCommand_ShouldReturnsFailResult()
        {
            //Arrange
            var handler = new CreateUserCommandHandler(
                _validator,
                Substitute.For<IUserWriteOnlyRepository>(),
                Substitute.For<IUnitOfWork>());

            //Act
            var act = await handler.Handle(new CreateUserCommand(), CancellationToken.None);

            //Assert
            act.Should().NotBeNull();
            act.IsSuccess.Should().BeFalse();
            act.ValidationErrors.Should().NotBeNullOrEmpty().And.OnlyHaveUniqueItems();
        }
    }
}

/*
üß™ TESTES DE UNIDADE - CreateUserCommandHandler

üìã PROP√ìSITO:
Testes unit√°rios que validam o comportamento do handler de cria√ß√£o de usu√°rios,
cobrindo cen√°rios de sucesso, falha por duplica√ß√£o e falha por valida√ß√£o.

üîß COMPONENTES TESTADOS:
‚Ä¢ CreateUserCommandHandler: Handler principal da opera√ß√£o
‚Ä¢ CreateUserCommandValidator: Validador FluentValidation
‚Ä¢ UserWriteOnlyRepository: Repository de escrita de usu√°rios
‚Ä¢ UnitOfWork: Padr√£o Unit of Work para transa√ß√µes

‚ö° CEN√ÅRIOS DE TESTE:

1Ô∏è‚É£ ADD_VALID_COMMAND:
   - Gera comando v√°lido com Bogus/Faker
   - Verifica se retorna IsCreated = true
   - Valida se o ID do usu√°rio foi gerado

2Ô∏è‚É£ ADD_DUPLICATE_EMAIL:
   - Cria usu√°rio inicial no banco
   - Tenta criar outro com mesmo email
   - Verifica erro espec√≠fico de email duplicado

3Ô∏è‚É£ ADD_INVALID_COMMAND:
   - Envia comando vazio/inv√°lido
   - Verifica falha na valida√ß√£o
   - Confirma presen√ßa de erros de valida√ß√£o

üöÄ FERRAMENTAS UTILIZADAS:
- xUnit: Framework de testes
- FluentAssertions: Assertions expressivas
- Bogus: Gera√ß√£o de dados fake
- NSubstitute: Mocking framework
- EfSqliteFixture: Banco em mem√≥ria para testes

üí° PADR√ïES APLICADOS:
- AAA (Arrange, Act, Assert)
- Isolamento de testes com fixture
- Mocking de depend√™ncias externas
- Gera√ß√£o de dados de teste realistas
*/